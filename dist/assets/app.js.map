{"version":3,"sources":["app/app.controller.js","app/treeMap/controller.js","app/treeMap/directive.js","app/treeMapDiv/controller.js","app/treeMapDiv/directive.js","common/neo4jD3/neo4j.js","common/neo4jD3/neo4jD3.js","app/app.module.js","app/treeMap/module.js","app/treeMapDiv/module.js","common/color/module.js","common/globalEvents/module.js","common/neo4jD3/module.js","app/app.config.js","app/app.libraries.js","app/app.settings.js","common/color/hex.js","common/color/hsl.js","common/color/rgb.js","common/d3Colors/d3Colors.js","common/globalEvents/service.js"],"names":["AppCtrl","$window","$","_","globalEvents","this","on","debounce","trigger","TreeMapCtrl","$element","$q","d3","neo4jD3","HEX","D3Colors","settings","$d3Element","find","_visibleDepth","currentLevel","treeMap","width","height","numColors","steps","colors","scale","category10","domain","range","getScaledFadedColors","x","linear","y","el","layout","treemap","children","d","depth","_children","sort","a","b","value","ratio","Math","sqrt","round","element","select","attr","append","style","node","grandParent","$grandParent","$grandParentContainer","parent","json","error","data","console","warn","draw","bind","treeMapDirective","controller","controllerAs","restrict","replace","templateUrl","TreeMapDivCtrl","currentDepth","classed","grandparent","then","treeMapDivDirective","Neo4J","$resource","url","user","password","query","method","headers","Accept","Content-type","Authorization","btoa","isArray","buildTree","results","child","currentChild","currentDataSet","currentParent","dataSet","i","len","childIndex","owl:Thing","nodes","name","columns","length","row","dataSets","numDataSets","ontID","uri","push","uuid","JSON","parse","stringify","Neo4jD3","neo4jUrl","neo4jUser","neo4jPassword","angular","module","config","constant","jQuery","noConflict","treeMapFadeInDuration","treeMapZoomDuration","prototype","accumulateAndPrune","valueProp","accumulateAndPruneChildren","numChildren","meta","originalDepth","numChildChildren","call","pseudoNode","j","skipped","unshift","splice","leaf","addChildren","level","firstTime","childChildNode","that","promises","selectAll","enter","visibleDepth","each","childChildren","addInnerNodes","childrensLeafs","filter","leafs","color","rect","addLabel","animateEls","concat","fadeIn","all","addEventListeners","transition","__data__","$this","e","preventDefault","deltaY","parents","parentsWithChildren","innerNodes","colorRgb","contrastBlack","contrast","toRgb","contrastWhite","text","addLevelsOfNodes","oldVisibleDepth","currentInnerNodes","remove","adjustLevelDepth","removeLevelsOfNodes","hex","rgb","colorHex","colorMode","branchNo","min","max","revDepth","colorEl","attribute","display","setBreadCrumb","formerGroupWrapper","groupWrapper","datum","initialize","selection","defers","index","defer","promise","duration","random","delay","resolve","dx","dy","cache","elements","reduction","group","undefined","removeClass","removeAttr","breadCrumbWidth","breadCrumbContainerWidth","current","crumb","insert","outerWidth","addClass","css","html","transitioning","newGroupsTrans","formerGroupWrapperTrans","newGroups","Object","defineProperty","configurable","enumerable","writable","get","set","directive","classes","visibility","coordinates","aspectRatio","nodesAtLevel","$el","opacity","transform","requestNextAnimationFrame","parseInt","addClickListener","event","oldLevel","newLevel","from","to","hidden","browseMode","mode","log","area","absX","absY","scaleX","scaleY","originX","originY","centerAdjustmentX","centerAdjustmentY","factory","$injector","constructor","toHsl","RGB","result","exec","toString","_hex","Error","match","HSL","hue","saturation","lightness","brighten","noLast","lStep","toHex","hueToRgb","p","q","t","r","g","_hue","_lightness","_saturation","service","red","green","blue","h","s","l","slice","luminosity","lum","absValue","relValue","pow","lum1","lum2","_blue","Number","_green","_red","_colors","fadedColors","hsl","ordinal","GlobalEvents","private","eventStack","off","callback","stack","isFunction","d3Deferred","statements","statement","$promise","response","errors","start","Date","getTime","d3Data","end","time","reject","neo4jResponse"],"mappings":"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","file":"app.js","sourcesContent":["function AppCtrl ($window, $, _, globalEvents) {\n  this.$ = $;\n  this._ = _;\n\n  this.$($window).on('resize orientationchange', this._.debounce(\n    function () {\n      globalEvents.trigger('resize');\n    },\n    250\n  ));\n}\n\nangular\n  .module('treeMapApp')\n  .controller('AppCtrl', [\n    '$window',\n    '$',\n    '_',\n    'globalEvents',\n    AppCtrl\n  ]);\n","/* global angular:false */\n\n/**\n * TreeMap controller constructor.\n *\n * @method  TreeMapCtrl\n * @author  Fritz Lekschas\n * @date    2015-08-04\n * @param   {Object}     $element  Directive's root element.\n * @param   {Object}     $q        Angular's promise service.\n * @param   {Object}     $         jQuery.\n * @param   {Object}     d3        D3.\n * @param   {Object}     neo4jD3   Neo4J to D3 converter.\n * @param   {Object}     HEX       HEX class.\n * @param   {Object}     D3Colors  Service for creating D3 color scalings.\n * @param   {Object}     settings  App wide this.settings.\n */\nfunction TreeMapCtrl ($element, $q, $, d3, neo4jD3, HEX, D3Colors, settings) {\n  this.$ = $;\n  this.$q = $q;\n  this.d3 = d3;\n  this.HEX = HEX;\n  this.$element = this.$($element),\n  this.$d3Element = this.$element.find('.treeMap svg');\n  this.settings = settings;\n\n  this._visibleDepth = 1;\n  this.currentLevel = 0;\n\n  this.treeMap.width = this.$d3Element.width();\n  this.treeMap.height = this.$d3Element.height();\n\n  this.numColors = 10;\n  this.steps = 6;\n\n  this.treeMap.colors = new D3Colors(\n    this.d3.scale.category10().domain(d3.range(this.numColors)).range()\n  ).getScaledFadedColors(this.steps);\n\n  this.treeMap.x = this.d3.scale.linear()\n    .domain([0, this.treeMap.width])\n    .range([0, this.treeMap.width]);\n\n  this.treeMap.y = this.d3.scale.linear()\n    .domain([0, this.treeMap.height])\n    .range([0, this.treeMap.height]);\n\n  this.treeMap.el = this.d3.layout.treemap()\n    .children(function(d, depth) { return depth ? null : d._children; })\n    .sort(function(a, b) { return a.value - b.value; })\n    .ratio(this.treeMap.height / this.treeMap.width * 0.5 * (1 + Math.sqrt(5)))\n    .round(false)\n    .ratio(1);\n\n  this.treeMap.element = this.d3.select(this.$d3Element[0])\n    .attr('viewBox', '0 0 ' + this.treeMap.width + ' ' + this.treeMap.height)\n    .append('g')\n      .style('shape-rendering', 'crispEdges');\n  this.treeMap.$element = this.$(this.treeMap.element.node());\n\n  this.treeMap.grandParent = this.d3.select('#back');\n  this.treeMap.$grandParent = this.$(this.treeMap.grandParent.node());\n  this.treeMap.$grandParentContainer = this.treeMap.$grandParent.parent();\n\n  /* ---------------------------- [START: STATIC] --------------------------- */\n  this.d3.json('data/cl.json', function(error, data) {\n    if (error) return console.warn(error);\n    this.data = data;\n    this.draw();\n  }.bind(this));\n  /* ----------------------------- [END: STATIC] ---------------------------- */\n\n  /* ----------------------------- [START: LIVE] ---------------------------- */\n  // neo4jD3\n  //   .get()\n  //   .then(function (data) {\n  //     this.data = data;\n  //     this.draw();\n  //   }.bind(this));\n  /* ------------------------------ [END: LIVE] ----------------------------- */\n}\n\n/*\n * -----------------------------------------------------------------------------\n * Methods\n * -----------------------------------------------------------------------------\n */\n\n/**\n * Starter function for aggrgation and pruning.\n *\n * @method  accumulateAndPrune\n * @author  Fritz Lekschas\n * @date    2015-08-18\n *\n * @param   {Object}  data        D3 data object.\n * @param   {String}  valueProp   Name of the property holding the value.\n */\nTreeMapCtrl.prototype.accumulateAndPrune = function (data, valueProp) {\n  var numChildren = data.children ? data.children.length : false;\n  data.meta = data.meta || {};\n\n  if (numChildren) {\n    accumulateAndPruneChildren.call(this, data, numChildren, valueProp, 0);\n    if (data.value) {\n      data.value += data[valueProp];\n    } else {\n      data.value = data[valueProp];\n    }\n  }\n\n  /**\n   * Recursively accumulate `valueProp` values and prune _empty_ leafs.\n   *\n   * This function traverses all inner loops and stops one level BEFORE a leaf\n   * to be able to splice (delete) empty leafs from the list of children\n   *\n   * @method  accumulateAndPruneChildren\n   * @author  Fritz Lekschas\n   * @date    2015-08-18\n   *\n   * @param   {Object}   node         D3 data object of the node.\n   * @param   {Number}   numChildren  Number of children of `node.\n   * @param   {String}   valueProp    Property name of the propery holding the\n   *   value of the node's _size_.\n   * @param   {Number}   depth        Original depth of the current node.\n   * @param   {Boolean}  root         If node is the root.\n   */\n  function accumulateAndPruneChildren (node, numChildren, valueProp, depth) {\n    // A reference for later\n    node._children = node.children;\n    node.meta.originalDepth = depth;\n    var i = numChildren;\n    // We move in reverse order so that deleting nodes doesn't affect future\n    // indices.\n    while (i--) {\n      var child = node.children[i];\n      var numChildChildren = child.children ? child.children.length : false;\n\n      child.meta = child.meta || {};\n\n      if (numChildChildren) {\n        // Inner node.\n        accumulateAndPruneChildren.call(\n          this, child, numChildChildren, valueProp, depth + 1\n        );\n        numChildChildren = child.children.length;\n      }\n\n      // We check again the number of children of the child since it can happen\n      // that all children have been deleted meanwhile and the inner node became\n      // a leaf as well.\n      if (numChildChildren) {\n        // Inner node.\n        if (child[valueProp]) {\n          // Add own `numDataSets` to existing `value`.\n          child.value += child[valueProp];\n          // To represent this node visually in the tree map we need to create\n          // a \"fake\" child, i.e. pseudo node, holding the values of this inner\n          // node.\n          child.children.push({\n            name: child.name,\n            meta: {\n              originalDepth: child.depth + 1,\n              pseudoNode: true\n            },\n            value: child[valueProp]\n          });\n          child.children[child.children.length - 1][valueProp] = child[valueProp];\n        } else {\n          // We prune `child`, i.e. remove, a node in two cases\n          // A) `child` is the only child of `node` or\n          // B) `child` only has one child.\n          // This way we ensure that the out degree of `child` is two or higher.\n          if (numChildren === 1 || numChildChildren === 1) {\n            // We can remove the inner node since it wasn't used for any\n            // annotations.\n            for (var j = 0, len = child.children.length; j < len; j++) {\n              if (child.children[j].meta.skipped) {\n                child.children[j].meta.skipped.unshift(child.name);\n              } else {\n                child.children[j].meta.skipped = [child.name];\n              }\n              node.children.push(child.children[j]);\n            }\n            // Remove the child with the empty valueProp\n            node.children.splice(i, 1);\n          }\n        }\n      } else {\n        // Leaf.\n        if (!child[valueProp]) {\n          // Leaf was not used for annotation so we remove it.\n          node.children.splice(i, 1);\n          numChildren--;\n          continue;\n        } else {\n          // Set `value` of the leaf itself.\n          child.value = child[valueProp];\n          child.meta.leaf = true;\n          child.meta.originalDepth = depth + 1;\n        }\n      }\n\n      // Increase `value` if the node by the children's `numDataSets`.\n      if (typeof node.value !== 'undefined') {\n        node.value += child.value;\n      } else {\n        node.value = child.value;\n      }\n    }\n  }\n};\n\n/**\n * Recursively adds children to the parent for `this.visibleDepth` levels.\n *\n * @method  addChildren\n * @author  Fritz Lekschas\n * @date    2015-08-18\n *\n * @param   {Object}   parent     D3 selection of parent.\n * @param   {Object}   data       D3 data object of `parent`.\n * @param   {Number}   level      Current level of depth relative to\n *   `this.currentLevel`, i.e. level = 0 = this.currentLevel.\n * @param   {Boolean}  firstTime  When `true` triggers a set of initializing\n *   animation.\n * @return  {Object}              D3 selection of `parent`'s children.\n */\nTreeMapCtrl.prototype.addChildren = function (parent, data, level, firstTime) {\n  var that = this,\n      childChildNode,\n      promises = [];\n\n  // Create a `g` wrapper for all children.\n  var children = parent.selectAll('.group-of-nodes')\n    .data(data._children)\n    .enter()\n      .append('g')\n      .attr('class', 'group-of-nodes');\n\n  // Recursion\n  if (level < this.visibleDepth) {\n    this.children[level + 1] = this.children[level + 1] || [];\n    children.each(function (data) {\n      if (data._children && data._children.length) {\n        var childChildren = that.addChildren(\n          that.d3.select(this), data, level + 1, firstTime);\n        that.children[level + 1].push(childChildren[0]);\n        promises.push(childChildren[1]);\n      }\n    });\n  } else {\n    /* Final level, i.e. `level === this.visibleDepth`.\n     *\n     * Since we only call the recursion as long as `level` is smaller than\n     * `this.visibleDepth` this else statement will only be reached when both\n     * variables are the same.\n     *\n     * On the final level we add \"inner nodes\"\n     */\n\n    childChildNode = this.addInnerNodes(children);\n  }\n\n  // D3 selection of all children without any children, i.e. leafs.\n  var childrensLeafs = children.filter(function(child) {\n      return !(child._children && child._children.length);\n    });\n\n  var leafs = childrensLeafs\n    .selectAll('.leaf-node')\n    .data(function (data) {\n      return [data];\n    })\n    .enter()\n    .append('g')\n      .attr('class', 'leaf-node')\n      .attr('opacity', 0);\n\n  leafs\n    .append('rect')\n      .attr('class', 'leaf')\n      .attr('fill', this.color.bind(this))\n      .call(this.rect.bind(this));\n\n  leafs\n    .call(this.addLabel.bind(this), 'name');\n\n  // Merge `leaf` and `childChildNode` selections. This turns out to be\n  var animateEls = leafs;\n  if (!leafs.length) {\n    animateEls = childrensLeafs;\n  }\n  if (childChildNode && childChildNode.length) {\n    animateEls[0] = animateEls[0].concat(childChildNode[0]);\n  }\n\n  promises = promises.concat(this.fadeIn(animateEls, firstTime));\n\n  return [children, this.$q.all(promises)];\n};\n\n/**\n * Adds global event listeners using jQuery.\n *\n * @method  addEventListeners\n * @author  Fritz Lekschas\n * @date    2015-08-04\n */\nTreeMapCtrl.prototype.addEventListeners = function () {\n  var that = this;\n\n  this.treeMap.$grandParent.on('click', 'a', function () {\n    /*\n     * that = TreeMapCtrl\n     * this = the clicked DOM element\n     * data = data\n     */\n    that.transition(this, this.__data__);\n  });\n\n  this.treeMap.$element.on(\n    'click',\n    '.label-wrapper, .outer-border',\n    function () {\n      /*\n       * that = TreeMapCtrl\n       * this = the clicked DOM element\n       * data = data\n       */\n      var $this = $(this);\n\n      if ($this.parent().attr('class') === 'leaf-node') {\n        return;\n      }\n\n      that.transition(this, this.__data__);\n    }\n  );\n\n  this.treeMap.$element.on('mousewheel', function (e) {\n    e.preventDefault();\n    this.visibleDepth += e.deltaY > 0 ? 1 : -1;\n  }.bind(this));\n};\n\n/**\n * Add inner nodes\n *\n * @method  addInnerNodes\n * @author  Fritz Lekschas\n * @date    2015-08-05\n * @param   {[type]}       parents  [description]\n */\nTreeMapCtrl.prototype.addInnerNodes = function (parents) {\n  // D3 selection of all children with children\n  var parentsWithChildren = parents.filter(function(parent) {\n    return parent._children && parent._children.length;\n  });\n\n  innerNodes = parentsWithChildren\n    .append('g')\n      .attr('class', 'inner-node')\n      .attr('opacity', 0);\n\n  innerNodes\n    .append('rect')\n      .attr('class', 'inner-border')\n      .attr('fill', this.color.bind(this))\n      .call(this.rect.bind(this), 1);\n\n  innerNodes\n    .append('rect')\n    .attr('class', 'outer-border')\n    .call(this.rect.bind(this));\n\n  innerNodes\n    .call(this.addLabel.bind(this), 'name');\n\n  return innerNodes;\n};\n\n/**\n * Appends a `foreignObject` into SVG holding a `DIV`\n *\n * @method  addLabel\n * @author  Fritz Lekschas\n * @date    2015-08-04\n * @param   {Object}    el    D3 selection.\n * @param   {String}    attr  Attribute name which holds the label's text.\n */\nTreeMapCtrl.prototype.addLabel = function (el, attr) {\n  var that = this;\n\n  el.append('foreignObject')\n    .attr('class', 'label-wrapper')\n    .call(this.rect.bind(this), 2)\n    .append('xhtml:div')\n      .attr('class', 'label')\n      .attr('title', function(data) {\n          return data[attr];\n      })\n      .classed('label-bright', function (data) {\n        if (data.meta.colorRgb) {\n          var contrastBlack = data.meta.colorRgb\n              .contrast(new that.HEX('#000000').toRgb()),\n            contrastWhite = data.meta.colorRgb\n              .contrast(new that.HEX('#ffffff').toRgb());\n          return contrastBlack < contrastWhite;\n        }\n      })\n      .append('xhtml:span')\n        .text(function(data) {\n            return data[attr];\n        });\n};\n\n/**\n * Add levels of children starting from level `level` until `this.visibleDepth`.\n *\n * @method  addLevelsOfNodes\n * @author  Fritz Lekschas\n * @date    2015-08-18\n *\n * @param   {Number}  oldVisibleDepth  Starting level.\n */\nTreeMapCtrl.prototype.addLevelsOfNodes = function (oldVisibleDepth) {\n  var currentInnerNodes = this.d3.selectAll('.inner-node'),\n    promises = [],\n    that = this;\n\n  this.children[oldVisibleDepth + 1] = this.children[oldVisibleDepth + 1] || [];\n  for (var i = 0, len = this.children[oldVisibleDepth].length; i < len; i++) {\n    this.children[oldVisibleDepth][i].each(function (data) {\n      if (data._children && data._children.length) {\n        var children = that.addChildren(\n          that.d3.select(this), data, oldVisibleDepth + 1);\n        that.children[oldVisibleDepth + 1].push(children[0]);\n        promises.push(children[1]);\n      }\n    });\n  }\n\n  // Remove formerly displayed inner nodes after all new inner nodes have been\n  // faded in.\n  this.$q.all(promises)\n    .then(function () {\n      currentInnerNodes.remove();\n    });\n};\n\n/**\n * Helper function that decides whether nodes have to be added or removed.\n *\n * @method  adjustLevelDepth\n * @author  Fritz Lekschas\n * @date    2015-08-18\n *\n * @param   {Number}  oldVisibleDepth  Former level of depth.\n */\nTreeMapCtrl.prototype.adjustLevelDepth = function (oldVisibleDepth) {\n  var that = this;\n\n  if (oldVisibleDepth < this.visibleDepth) {\n    this.addLevelsOfNodes(oldVisibleDepth);\n  }\n  if (oldVisibleDepth > this.visibleDepth) {\n    this.removeLevelsOfNodes(oldVisibleDepth);\n  }\n};\n\n/**\n * Generate a color given an elements node data object.\n *\n * @method  color\n * @author  Fritz Lekschas\n * @date    2015-07-31\n * @param   {Object}  node  D3 node data object.\n * @return  {String}        HEX color string.\n */\nTreeMapCtrl.prototype.color = function (node) {\n  var hex, rgb;\n\n  if (node.meta.colorHex) {\n    return node.meta.colorHex;\n  }\n\n  if (this.colorMode === 'depth') {\n    // Color by original depth\n    // The deeper the node, the lighter the color\n    hex = this.treeMap.colors((node.meta.branchNo[0] * this.steps) +\n      Math.min(this.steps, node.meta.originalDepth) - 1);\n  } else {\n    // Default:\n    // Color by reverse final depth (after pruning). The fewer children a node\n    // has, the lighter the color. E.g. a leaf is lightest while the root is\n    // darkest.\n    hex = this.treeMap.colors((node.meta.branchNo[0] * this.steps) +\n      Math.max(0, this.steps - node.meta.revDepth - 1));\n  }\n\n  // Precompute RGB\n  rgb = new this.HEX(hex).toRgb();\n\n  // Cache colors for speed\n  node.meta.colorHex = hex;\n  node.meta.colorRgb = rgb;\n\n  return hex;\n}\n\n/**\n * Provide a color to a DOM's attribute\n *\n * @method  colorEl\n * @author  Fritz Lekschas\n * @date    2015-07-31\n * @param   {Object}    element    DOM element created by D3.\n * @param   {String}    attribute  Name of attribute that should be colored.\n */\nTreeMapCtrl.prototype.colorEl = function (element, attribute) {\n  element\n    .attr(attribute, this.color.bind(this));\n};\n\n/**\n * Display the data.\n *\n * @param   {Object}  node  D3 data object of the node.\n * @return  {Object}        D3 selection of node's children.\n */\nTreeMapCtrl.prototype.display = function (node, firstTime) {\n  var that = this;\n\n  this.setBreadCrumb(node);\n\n  // Keep a reference to the old wrapper\n  this.treeMap.formerGroupWrapper = this.treeMap.groupWrapper;\n\n  // Create a new wrapper group for the children.\n  this.treeMap.groupWrapper = this.treeMap.element\n    .append('g')\n    .datum(node)\n    .attr('class', 'depth');\n\n  // For completeness we store the children of level zero.\n  this.children[0] = [this.treeMap.groupWrapper];\n\n  var children = this.addChildren(\n    this.treeMap.groupWrapper, node, 1, firstTime);\n\n  // We have to cache the children to dynamically adjust the level depth.\n  this.children[1] = [children[0]];\n\n  return children;\n};\n\n/**\n * Draw the treemap.\n *\n * @method  draw\n * @author  Fritz Lekschas\n * @date    2015-08-03\n */\nTreeMapCtrl.prototype.draw = function () {\n  if (this.data === null) {\n    return false;\n  }\n\n  this.initialize(this.data);\n  this.accumulateAndPrune(this.data, 'numDataSets');\n  this.layout(this.data, 0);\n  this.display(this.data, true);\n\n  this.addEventListeners();\n};\n\n/**\n * Fade in a selection.\n *\n * @method  fadeIn\n * @author  Fritz Lekschas\n * @date    2015-08-05\n * @param   {Object}   selection  D3 selection.\n * @param   {Boolean}  firstTime  True if triggered the first time, i.e. after\n *   the page loaded.\n * @return  {Array}              Angular promises.\n */\nTreeMapCtrl.prototype.fadeIn = function (selection, firstTime) {\n  var defers = [],\n      promises = [],\n      that = this;\n\n  selection\n    .each(function (data, index) {\n      defers[index] = that.$q.defer();\n      promises[index] = defers[index].promise;\n    });\n\n  selection\n    .transition()\n    .duration(function () {\n      if (firstTime) {\n        return that.settings.treeMapFadeInDuration + (Math.random() * that.settings.treeMapFadeInDuration);\n      }\n      return that.settings.treeMapFadeInDuration;\n    })\n    .delay(function () {\n      if (firstTime) {\n        return Math.random() * that.settings.treeMapFadeInDuration;\n      }\n      return 0;\n    })\n    .attr('opacity', 1)\n    .each('end', function (data, index) {\n      defers[index].resolve();\n    });\n\n  return promises;\n};\n\n/**\n * Initialize the root node. This would usually be computed by `treemap()`.\n *\n * @method  initialize\n * @author  Fritz Lekschas\n * @date    2015-08-03\n * @param   {Object}  data  D3 data object.\n */\nTreeMapCtrl.prototype.initialize = function (data) {\n  data.x = data.y = 0;\n  data.dx = this.treeMap.width;\n  data.dy = this.treeMap.height;\n  data.depth = 0;\n  data.meta = {\n    branchNo: []\n  };\n};\n\n/**\n * Recursively compute the layout of each node depended on its parent.\n *\n * Compute the treemap layout recursively such that each group of siblings uses\n * the same size (1×1) rather than the dimensions of the parent cell. This\n * optimizes the layout for the current zoom state. Note that a wrapper object\n * is created for the parent node for each group of siblings so that the\n * parent's dimensions are not discarded as we recurse. Since each group of\n * sibling was laid out in 1×1, we must rescale to fit using absolute\n * coordinates. This lets us use a viewport to zoom.\n *\n * @method  layout\n * @author  Fritz Lekschas\n * @date    2015-08-03\n * @param   {Object}  data  D3 data object.\n */\nTreeMapCtrl.prototype.layout = function (parent, depth) {\n  // Initialize a cache object used later\n  parent.cache = {};\n  parent.meta.depth = depth;\n  if (parent._children && parent._children.length) {\n    this.depth = Math.max(this.depth, depth + 1);\n    // This creates an anonymous 1px x 1px treemap and sets the children's\n    // coordinates accordingly.\n    this.treeMap.el({_children: parent._children});\n    for (var i = 0, len = parent._children.length; i < len; i++) {\n      var child = parent._children[i];\n      child.x = parent.x + child.x * parent.dx;\n      child.y = parent.y + child.y * parent.dy;\n      child.dx *= parent.dx;\n      child.dy *= parent.dy;\n      child.parent = parent;\n\n      child.meta.branchNo = parent.meta.branchNo.concat([i]);\n\n      this.layout(child, depth + 1);\n      parent.meta.revDepth = Math.max(\n        child.meta.revDepth + 1,\n        parent.meta.revDepth || 0\n      )\n    }\n  } else {\n    // Leaf\n    // Leafs have a reverse depth of zero.\n    parent.meta.revDepth = 0;\n  }\n};\n\n/**\n * Set the coordinates of the rectangular.\n *\n * @description\n * How to invoke:\n * `d3.selectAll('rect').call(this.rect.bind(this))`\n *\n * Note: This weird looking double _this_ is needed as the context of a `call`\n * function is actually the same as the selection passed to it, which seems\n * redundant but that's how it works right now. So to assign `TreeMapCtrl` as\n * the context we have to manually bind `this`.\n *\n * URL: https://github.com/mbostock/d3/wiki/Selections#call\n *\n * @method  rect\n * @author  Fritz Lekschas\n * @date    2015-08-03\n * @param   {Array}  elements  D3 selection of DOM elements.\n */\nTreeMapCtrl.prototype.rect = function (elements, reduction) {\n  var that = this;\n\n  reduction = reduction || 0;\n\n  elements\n    .attr('x', function (data) {\n      return that.treeMap.x(data.x) + reduction;\n    })\n    .attr('y', function (data) {\n      return that.treeMap.y(data.y) + reduction;\n    })\n    .attr('width', function (data) {\n      data.cache.width = Math.max(0, (\n        that.treeMap.x(data.x + data.dx)\n        - that.treeMap.x(data.x)\n        - (2 * reduction)\n      ));\n\n      return data.cache.width;\n    })\n    .attr('height', function (data) {\n      data.cache.height = Math.max(0, (\n        that.treeMap.y(data.y + data.dy)\n        - that.treeMap.y(data.y)\n        - (2 * reduction)\n      ));\n\n      return data.cache.height;\n    });\n};\n\n/**\n * Remove all levels until `newLevel`.\n *\n * @method  removeLevelsOfNodes\n * @author  Fritz Lekschas\n * @date    2015-08-05\n * @param   {Number}  oldVisibleDepth  Former level of depth.\n */\nTreeMapCtrl.prototype.removeLevelsOfNodes = function (oldVisibleDepth) {\n    var i,\n      len,\n      startLevel = this.currentLevel + this.visibleDepth,\n      that = this;\n\n    // Add inner nodes to `.group-of-nodes` at `startLevel`.\n    for (i = 0, len = this.children[this.visibleDepth].length; i < len; i++) {\n      this.children[this.visibleDepth][i].each(function (data) {\n        that.fadeIn(that.addInnerNodes(that.d3.select(this)));\n      });\n    }\n\n    // Remove all children deeper than what is specified.\n    for (i = 0, len = this.children[this.visibleDepth + 1].length; i < len; i++) {\n      var group = this.children[this.visibleDepth + 1][i].transition().duration(250);\n\n      // Fade groups out and remove them\n      group\n        .style('opacity', 0)\n        .remove();\n    }\n    // Unset intemediate levels\n    for (i = this.visibleDepth + 1; i <= oldVisibleDepth; i++) {\n      this.children[i] = undefined;\n    }\n};\n\n/**\n * Set breadcrumb navigation from the current `node` to the root.\n *\n * @method  setBreadCrumb\n * @author  Fritz Lekschas\n * @date    2015-08-03\n * @param   {Object}  node  D3 data object.\n */\nTreeMapCtrl.prototype.setBreadCrumb = function (node) {\n  this.treeMap.grandParent.selectAll('li').remove();\n  this.treeMap.$grandParent\n    .removeClass('right')\n    .removeAttr('style');\n  this.treeMap.breadCrumbWidth = 0;\n  this.treeMap.breadCrumbContainerWidth = this.treeMap.breadCrumbContainerWidth || this.treeMap.$grandParentContainer.width();\n\n  var gp = $(this.treeMap.grandParent[0]);\n\n  var parent = node.parent,\n      that = this;\n\n  // Add current root as an indecator where we are.\n  var current = this.treeMap.grandParent\n    .append('li')\n      .attr('class', 'current-root');\n\n  if (parent) {\n    current\n      .append('svg')\n        .attr('class', 'icon-arrow-left is-mirrored')\n        .append('use')\n          .attr('xlink:href', 'assets/images/icons.svg#arrow-left');\n  }\n\n  current\n    .append('span')\n      .attr('class', 'text')\n      .text(node.name);\n\n  this.treeMap.breadCrumbWidth += $(current.node()).width();\n\n  while (parent) {\n    var crumb = this.treeMap.grandParent\n      .insert('li', ':first-child')\n        .append('a')\n          .datum(parent);\n\n    if (parent.parent) {\n      crumb\n        .append('svg')\n          .attr('class', 'icon-arrow-left is-mirrored')\n          .append('use')\n            .attr('xlink:href', 'assets/images/icons.svg#arrow-left');\n    }\n\n    crumb\n      .append('span')\n        .attr('class', 'text')\n        .text(parent.name);\n\n    this.treeMap.breadCrumbWidth += $(crumb.node()).outerWidth();\n\n    if (this.treeMap.breadCrumbWidth > this.treeMap.breadCrumbContainerWidth) {\n      this.treeMap.$grandParent\n        .addClass('right')\n        .css('marginLeft', -this.treeMap.breadCrumbWidth);\n\n      $(crumb.node()).parent().html('&hellip;');\n\n      break;\n    }\n\n    node = parent;\n    parent = node.parent;\n  }\n};\n\n/**\n * Transition between parent and child branches of the treemap.\n *\n * @method  transition\n * @author  Fritz Lekschas\n * @date    2015-08-03\n * @param   {Object}  data  D3 data object of the node to transition to.\n */\nTreeMapCtrl.prototype.transition = function (el, data) {\n  if (this.treeMap.transitioning || !data) {\n    return;\n  }\n\n  this.currentLevel = data.meta.depth;\n\n  this.treeMap.transitioning = true;\n\n  var newGroups = this.display.call(this, data),\n      newGroupsTrans, formerGroupWrapper, formerGroupWrapperTrans;\n\n  // After all newly added inner nodes and leafs have been faded in we call the\n  // zoom transition.\n  newGroups[1]\n    .then(function () {\n      // Fade in animations finished\n      newGroups = newGroups[0];\n      newGroupsTrans = newGroupsTrans = newGroups\n        .transition()\n        .duration(this.settings.treeMapZoomDuration);\n      formerGroupWrapper = this.treeMap.formerGroupWrapper;\n      formerGroupWrapperTrans = formerGroupWrapper\n        .transition()\n        .duration(this.settings.treeMapZoomDuration);\n\n      // Update the domain only after entering new elements.\n      this.treeMap.x.domain([data.x, data.x + data.dx]);\n      this.treeMap.y.domain([data.y, data.y + data.dy]);\n\n      // Enable anti-aliasing during the transition.\n      this.treeMap.element.style('shape-rendering', null);\n\n      // Fade-in entering text.\n      newGroups.selectAll('.label-wrapper')\n        .style('fill-opacity', 0);\n\n      formerGroupWrapperTrans.selectAll('.inner-border')\n        .call(this.rect.bind(this), 1);\n\n      formerGroupWrapperTrans.selectAll('.outer-border, .leaf')\n        .call(this.rect.bind(this));\n\n      formerGroupWrapperTrans.selectAll('.label-wrapper')\n        .call(this.rect.bind(this), 2);\n\n      newGroupsTrans.selectAll('.inner-border')\n        .call(this.rect.bind(this), 1);\n\n      newGroupsTrans.selectAll('.outer-border, .leaf')\n        .call(this.rect.bind(this));\n\n      newGroupsTrans.selectAll('.label-wrapper')\n        .style('fill-opacity', 1)\n        .call(this.rect.bind(this), 2);\n\n      // Remove the old node when the transition is finished.\n      formerGroupWrapperTrans.remove()\n        .each('end', function() {\n          this.treeMap.element.style('shape-rendering', 'crispEdges');\n          this.treeMap.transitioning = false;\n        }.bind(this));\n    }.bind(this))\n    .catch(function (e) {\n      console.error(e);\n    });\n};\n\n\n/*\n * -----------------------------------------------------------------------------\n * Properties\n * -----------------------------------------------------------------------------\n */\n\n/**\n * Holds all nodes per level.\n *\n * @author  Fritz Lekschas\n * @date    2015-08-04\n * @type    {Array}\n */\nObject.defineProperty(\n  TreeMapCtrl.prototype,\n  'children',\n  {\n    configurable: false,\n    enumerable: true,\n    value: [],\n    writable: true\n  }\n);\n\n/**\n * D3 data object.\n *\n * @author  Fritz Lekschas\n * @date    2015-08-04\n * @type    {Boolean}\n */\nObject.defineProperty(\n  TreeMapCtrl.prototype,\n  'data',\n  {\n    configurable: false,\n    enumerable: true,\n    value: {},\n    writable: true\n});\n\n/**\n * Depth of the pruned data tree.\n *\n * @author  Fritz Lekschas\n * @date    2015-08-04\n * @type    {Number}\n */\nObject.defineProperty(\n  TreeMapCtrl.prototype,\n  'depth',\n  {\n    configurable: false,\n    enumerable: true,\n    value: 0,\n    writable: true\n});\n\n/**\n * Number of visible levels below the current level.\n *\n * @author  Fritz Lekschas\n * @date    2015-08-04\n * @type    {Number}\n */\nObject.defineProperty(\n  TreeMapCtrl.prototype,\n  'visibleDepth',\n  {\n    configurable: false,\n    enumerable: true,\n    get: function () {\n      return this._visibleDepth;\n    },\n    set: function (visibleDepth) {\n      var oldVisibleDepth = this._visibleDepth;\n      this._visibleDepth = Math.min(Math.max(1, visibleDepth), this.depth);\n      this.adjustLevelDepth(oldVisibleDepth);\n    }\n});\n\n/**\n * Object holding the actual D3 treemap and related data.\n *\n * @type  {Object}\n */\nObject.defineProperty(\n  TreeMapCtrl.prototype,\n  'treeMap',\n  {\n    configurable: false,\n    enumerable: true,\n    value: {},\n    writable: true\n});\n\nangular\n  .module('treeMap')\n  .controller('TreeMapCtrl', [\n    '$element',\n    '$q',\n    '$',\n    'd3',\n    'neo4jD3',\n    'HEX',\n    'D3Colors',\n    'settings',\n    TreeMapCtrl\n  ]);\n","function treeMapDirective () {\n  'use strict';\n\n  return {\n    controller: 'TreeMapCtrl',\n    controllerAs: 'treeMap',\n    restrict: 'E',\n    replace: true,\n    templateUrl: 'treeMap/template.html'\n  };\n}\n\nangular\n  .module('treeMap')\n  .directive('treeMap', [\n    treeMapDirective\n  ]);\n","/* global angular:false */\n\nfunction TreeMapDivCtrl ($window, $element, $, d3, neo4jD3, D3Colors) {\n  this.$window = $window;\n  this.$ = $;\n  this.d3 = d3;\n  this.$element = this.$($element),\n  this.$d3Element = this.$element.find('.treeMap');\n\n  /**\n   * Current level of depth. By default starting at the root, e.g. zero.\n   *\n   * @type  {Number}\n   */\n  this.currentDepth = 0;\n\n  this._visibleDepth = 3;\n\n  this.treeMap.width = this.$d3Element.width();\n  this.treeMap.height = this.$d3Element.height();\n\n  this.numColors = 10;\n  this.steps = 6;\n\n  this.treeMap.colors = new D3Colors(\n    this.d3.scale.category10().domain(d3.range(this.numColors)).range()\n  ).getScaledFadedColors(this.steps);\n\n  this.treeMap.x = this.d3.scale.linear()\n    .domain([0, this.treeMap.width])\n    .range([0, this.treeMap.width]);\n\n  this.treeMap.y = this.d3.scale.linear()\n    .domain([0, this.treeMap.height])\n    .range([0, this.treeMap.height]);\n\n  this.treeMap.el = this.d3.layout.treemap()\n    .children(function(d, depth) { return depth ? null : d._children; })\n    .sort(function(a, b) { return a.value - b.value; })\n    .ratio(this.treeMap.height / this.treeMap.width * 0.5 * (1 + Math.sqrt(5)))\n    .round(false);\n\n  this.treeMap.element = this.d3.select(this.$d3Element[0]).append('div')\n    .classed('wrapper', true);\n\n  this.treeMap.$element = $(this.treeMap.element[0]);\n\n  this.treeMap.grandparent = this.d3.select('#back');\n\n  neo4jD3.d3\n    .then(function (data) {\n      this.data = data;\n      this.draw();\n    }.bind(this));\n}\n\n/*\n * -----------------------------------------------------------------------------\n * Methods\n * -----------------------------------------------------------------------------\n */\n\n/**\n * Starter function for aggrgation and pruning.\n *\n * @param  {Object} data       D3 data object.\n * @param  {String} valueProp  Name of the property holding the value.\n */\nTreeMapDivCtrl.prototype.accumulateAndPrune = function (data, valueProp) {\n  var numChildren = data.children ? data.children.length : false;\n  data.meta = data.meta || {};\n\n  if (numChildren) {\n    accumulateAndPruneChildren.call(this, data, numChildren, valueProp, 0);\n    if (data.value) {\n      data.value += data[valueProp];\n    } else {\n      data.value = data[valueProp];\n    }\n  }\n\n  /**\n   * Recursively accumulate `valueProp` values and prune _empty_ leafs.\n   *\n   * This function traverses all inner loops and stops one level BEFORE a leaf\n   * to be able to splice (delete) empty leafs from the list of children\n   *\n   * @param  {Object}   node         D3 data object of the node.\n   * @param  {Number}   numChildren  Number of children of `node.\n   * @param  {String}   valueProp    Property name of the propery holding the value of the node's _size_.\n   * @param  {Number}   depth        Original depth of the current node.\n   * @param  {Boolean}  root         If node is the root.\n   */\n  function accumulateAndPruneChildren (node, numChildren, valueProp, depth) {\n    // A reference for later\n    node._children = node.children;\n    node.meta.originalDepth = depth;\n    var i = numChildren;\n    // We move in reverse order so that deleting nodes doesn't affect future\n    // indices.\n    while (i--) {\n      var child = node.children[i];\n      var numChildChildren = child.children ? child.children.length : false;\n\n      child.meta = child.meta || {};\n\n      if (numChildChildren) {\n        // Inner node.\n        accumulateAndPruneChildren.call(\n          this, child, numChildChildren, valueProp, depth + 1\n        );\n        numChildChildren = child.children.length;\n      }\n\n      // We check again the number of children of the child since it can happen\n      // that all children have been deleted meanwhile and the inner node became\n      // a leaf as well.\n      if (numChildChildren) {\n        // Inner node.\n        if (child[valueProp]) {\n          // Add own `numDataSets` to existing `value`.\n          child.value += child[valueProp];\n          // To represent this node visually in the tree map we need to create\n          // a \"fake\" child, i.e. pseudo node, holding the values of this inner\n          // node.\n          child.children.push({\n            name: child.name,\n            meta: {\n              originalDepth: child.depth + 1,\n              pseudoNode: true\n            },\n            value: child[valueProp]\n          });\n          child.children[child.children.length - 1][valueProp] = child[valueProp];\n        } else {\n          // We prune `child`, i.e. remove, a node in two cases\n          // A) `child` is the only child of `node` or\n          // B) `child` only has one child.\n          // This way we ensure that the out degree of `child` is two or higher.\n          if (numChildren === 1 || numChildChildren === 1) {\n            // We can remove the inner node since it wasn't used for any\n            // annotations.\n            for (var j = 0, len = child.children.length; j < len; j++) {\n              if (child.children[j].meta.skipped) {\n                child.children[j].meta.skipped.unshift(child.name);\n              } else {\n                child.children[j].meta.skipped = [child.name];\n              }\n              node.children.push(child.children[j]);\n            }\n            // Remove the child with the empty valueProp\n            node.children.splice(i, 1);\n          }\n        }\n      } else {\n        // Leaf.\n        if (!child[valueProp]) {\n          // Leaf was not used for annotation so we remove it.\n          node.children.splice(i, 1);\n          numChildren--;\n          continue;\n        } else {\n          // Set `value` of the leaf itself.\n          child.value = child[valueProp];\n          child.meta.leaf = true;\n          child.meta.originalDepth = depth + 1;\n        }\n      }\n\n      // Increase `value` if the node by the children's `numDataSets`.\n      if (typeof node.value !== 'undefined') {\n        node.value += child.value;\n      } else {\n        node.value = child.value;\n      }\n    }\n  }\n};\n\n\n/**\n * Recursively add nodes level by level.\n *\n * @method  addChildren\n * @author  Fritz Lekschas\n * @date    2015-08-01\n * @param   {[type]}     parent  [description]\n * @param   {[type]}     data    [description]\n * @param   {[type]}     level   [description]\n */\nTreeMapDivCtrl.prototype.addChildren = function (\n  parent, data, level, firstTime) {\n  var that = this;\n\n  // Create nodes\n  var nodes = parent.selectAll('div')\n    .data(data._children)\n    .enter()\n      .append('div')\n      .attr('class', function (node) {\n        var classes = 'node';\n        if (node._children && node._children.length) {\n          classes += ' inner-node';\n        } else {\n          classes += ' leaf';\n          node.visibility = true;\n        }\n        if (level == this.visibleDepth) {\n          classes += ' last';\n          node.visibility = true;\n        }\n        // Hide nodes if they are deeper than the specified `depth`\n        if (level > this.visibleDepth) {\n          classes += ' hidden';\n        }\n        return classes;\n      }.bind(this))\n      .attr('title', function (node) {\n        return node.uri;\n      })\n      .style('background-color', function (node) {\n        if (node.visibility) {\n          return this.color(node);\n        }\n      }.bind(this))\n      .call(that.coordinates.bind(that));\n\n  // Add name to nodes\n  nodes.append('span')\n    .attr('class', function (node) {\n      var classes = 'name';\n      if (node.meta.aspectRatio < 1) {\n        classes += ' rotated';\n      }\n      return classes;\n    })\n    .text(function(node) { return node.name; });\n\n  this.nodesAtLevel[level + 1] = this.nodesAtLevel[level + 1] || [];\n\n  nodes.each(function (node) {\n\n    if (firstTime && node.visibility) {\n      var $el = $(this);\n\n      $el\n        .css({\n          'opacity': 0,\n          'transform': 'scale(0.9)'\n        });\n\n      that.$window.requestNextAnimationFrame(function() {\n        $el\n          .css('transitionDuration', function () {\n            return ((500 + parseInt(Math.random() * 750)) / 1000) + 's';\n          })\n          .css('transitionDelay', function () {\n            return (parseInt(Math.random() * 500) / 1000) + 's';\n          })\n          .css({\n            'opacity': 1,\n            'transform': 'scale(1)'\n          });\n      });\n    }\n\n    if (node._children && node._children.length) {\n      // Recursion\n      that.nodesAtLevel[level + 1].push(\n        that.addChildren(that.d3.select(this), node, level + 1, firstTime)\n      );\n    }\n  });\n\n  return nodes;\n};\n\nTreeMapDivCtrl.prototype.addClickListener = function () {\n  var that = this;\n\n  $(this.treeMap.element[0]).on('click', '.inner-node.last', function (event) {\n    // D3 hard links data with DOM elements and stores it under the `__data__`\n    // property.\n    that.transition(this, this.__data__);\n  });\n};\n\nTreeMapDivCtrl.prototype.adjustLevelDepth = function (oldLevel, newLevel) {\n  if (oldLevel === newLevel) {\n    return;\n  }\n\n  var from, to, i, j, hidden;\n\n  if (oldLevel < newLevel) {\n    from = oldLevel - 1;\n    to = newLevel;\n  } else {\n    // Remove all children deeper than what is specified.\n    hidden = true;\n    from = newLevel - 1;\n    to = oldLevel;\n  }\n\n  for (i = 0, len = this.nodesAtLevel[newLevel].length; i < len; i++) {\n    // Show nodes at current level\n    this.nodesAtLevel[newLevel][i]\n      .classed('last', true)\n      .classed('hidden', false);\n  }\n\n  for (i = 0, len = this.nodesAtLevel[oldLevel].length; i < len; i++) {\n    // Hide nodes at former level\n    this.nodesAtLevel[oldLevel][i]\n      .classed('last', false)\n      .classed('hidden', true);\n  }\n\n\n  // `from` and `to` are included in the loop.\n  while (from++ < to) {\n    for (i = 0, len = this.nodesAtLevel[from].length; i < len; i++) {\n      this.nodesAtLevel[from][i]\n        .style('background-color', function (node) {\n          if (from === newLevel || node.meta.revDepth === 0) {\n            return this.color(node);\n          }\n        }.bind(this))\n        .classed('last', function (node) {\n          if (from === newLevel) {\n            return true;\n          }\n        })\n        .classed('hidden', function (node) {\n          if (hidden && from === newLevel) {\n            return false;\n          }\n          return hidden;\n        });\n    }\n  }\n};\n\n/**\n * Set the browsing mode.\n *\n * @param  {String}  mode  Name of the mode.\n */\nTreeMapDivCtrl.prototype.browseMode = function (mode) {\n  this.mode = mode;\n};\n\n/**\n * Generate a color given an elements node data object.\n *\n * @method  color\n * @author  Fritz Lekschas\n * @date    2015-07-31\n * @param   {Object}  node  D3 node data object.\n * @return  {String}        HEX color string.\n */\nTreeMapDivCtrl.prototype.color = function (node) {\n  if (this.colorMode === 'depth') {\n    // Color by original depth\n    // The deeper the node, the lighter the color\n    return this.treeMap.colors((node.meta.branchNo[0] * this.steps) +\n      Math.min(this.steps, node.meta.originalDepth) - 1);\n  }\n  // Default:\n  // Color by reverse final depth, i.e. after pruning. The fewer children a node\n  // has, the lighter the color. E.g. a leaf is lightest while the root is\n  // darkest.\n  return this.treeMap.colors((node.meta.branchNo[0] * this.steps) +\n    Math.max(0, this.steps - node.meta.revDepth - 1));\n}\n\n/**\n * Provide a color to a DOM's attribute\n *\n * @method  colorEl\n * @author  Fritz Lekschas\n * @date    2015-07-31\n * @param   {Object}    element    DOM element created by D3.\n * @param   {String}    attribute  Name of attribute that should be colored.\n */\nTreeMapDivCtrl.prototype.colorEl = function (element, attribute) {\n  element\n    .attr(attribute, this.color.bind(this));\n};\n\n/**\n * Display the data.\n *\n * @param   {Object}  node  D3 data object of the node.\n * @return  {Object}        D3 selection of node's children.\n */\nTreeMapDivCtrl.prototype.display = function (node, firstTime) {\n  var that = this;\n\n  // Update the grand parent, which is kind of the \"back button\"\n  this.treeMap.grandparent\n    .datum(node.parent)\n    .on(\"click\", function (data) {\n      /*\n       * that = TreeMapDivCtrl\n       * this = the clicked DOM element\n       * data = data\n       */\n      that.transition.call(that, this, data);\n    })\n    .text(this.name(node));\n\n  this.treeMap.element\n    .datum(node);\n\n  // For completeness we store the children of level zero.\n  this.nodesAtLevel[0] = [this.treeMap.element];\n\n  var children = this.addChildren.call(\n    this, this.treeMap.element, node, 1, firstTime);\n\n  // We have to cache the children to dynamically adjust the level depth.\n  this.nodesAtLevel[1] = [children];\n\n  return children;\n};\n\n/**\n * Draw the treemap.\n */\nTreeMapDivCtrl.prototype.draw = function () {\n  if (this.data === null) {\n    return false;\n  }\n\n  console.log('vdepth ' + this.visibleDepth);\n\n  this.initialize(this.data);\n  this.accumulateAndPrune(this.data, 'numDataSets');\n  this.layout(this.data, 0);\n  this.display(this.data, true);\n  this.addClickListener();\n};\n\n/**\n * Initialize the root node. This would usually be computed by `treemap()`.\n *\n * @param  {Object} data  D3 data object.\n */\nTreeMapDivCtrl.prototype.initialize = function (data) {\n  data.x = data.y = 0;\n  data.dx = this.treeMap.width;\n  data.dy = this.treeMap.height;\n  data.depth = 0;\n  data.meta = {\n    branchNo: []\n  };\n};\n\n/**\n * Recursively compute the layout of each node depended on its parent.\n *\n * Compute the treemap layout recursively such that each group of siblings uses\n * the same size (1×1) rather than the dimensions of the parent cell. This\n * optimizes the layout for the current zoom state. Note that a wrapper object\n * is created for the parent node for each group of siblings so that the\n * parent's dimensions are not discarded as we recurse. Since each group of\n * sibling was laid out in 1×1, we must rescale to fit using absolute\n * coordinates. This lets us use a viewport to zoom.\n *\n * @param  {Object}  data  D3 data object.\n */\nTreeMapDivCtrl.prototype.layout = function (parent, depth) {\n  parent.meta.depth = depth;\n  if (parent._children && parent._children.length) {\n    this.treeMap.depth = Math.max(this.treeMap.depth, depth + 1);\n    // This creates an anonymous 1px x 1px treemap and sets the children's\n    // coordinates accordingly.\n    this.treeMap.el({_children: parent._children});\n    for (var i = 0, len = parent._children.length; i < len; i++) {\n      var child = parent._children[i];\n      child.x = child.x * parent.dx;\n      child.y = child.y * parent.dy;\n      child.dx *= parent.dx;\n      child.dy *= parent.dy;\n      child.parent = parent;\n\n      // Store aspect ration and area for later font styling\n      child.meta.aspectRatio = child.dx / child.dy;\n      child.meta.area = child.dy * child.dx;\n\n      // Keep a reference of the branches that have been taken\n      child.meta.branchNo = parent.meta.branchNo.concat([i]);\n\n      // Recursion\n      this.layout(child, depth + 1);\n\n      // Take the max reverse depth when we visite the inner node the second\n      // time.\n      parent.meta.revDepth = Math.max(\n        child.meta.revDepth + 1,\n        parent.meta.revDepth || 0\n      )\n    }\n  } else {\n    // Leaf\n    // Leafs have a reverse depth of zero.\n    parent.meta.revDepth = 0;\n  }\n};\n\n/**\n * Generate the name of the node.\n *\n * @param   {Object}  data  Node's D3 data object.\n * @return  {String}        Name of the node.\n */\nTreeMapDivCtrl.prototype.name = function (data) {\n    return data.parent ? this.name(data.parent) + \".\" + data.name : data.name;\n};\n/**\n * Set the coordinates of the rectangular.\n *\n * How to invoke:\n * `d3.selectAll('rect').call(this.rect.bind(this))`\n *\n * Note: This weird looking double this is needed as the context of a `call`\n * function is actually the same as the selection passed to it, which seems\n * redundant but that's how it works right now. So to assign `TreeMapDivCtrl` as\n * the context we have to manually bind `this`.\n *\n * URL: https://github.com/mbostock/d3/wiki/Selections#call\n *\n * @param  {Array}  elements  D3 selection of DOM elements.\n */\nTreeMapDivCtrl.prototype.coordinates = function (elements) {\n  var that = this;\n\n  elements\n    .style('left', function (data) {\n      return that.treeMap.x(data.x) + 'px';\n    })\n    .style('top', function (data) {\n      return that.treeMap.y(data.y) + 'px';\n    })\n    .style('width', function (data) {\n      return (that.treeMap.x(data.x + data.dx) - that.treeMap.x(data.x)) + 'px';\n    })\n    .style('height', function (data) {\n      return (that.treeMap.y(data.y + data.dy) - that.treeMap.y(data.y)) + 'px';\n    });\n};\n\n/**\n * Transition between parent <> child branches of the treemap.\n *\n * @param   {Object}  data  D3 data object of the node to transition to.\n */\nTreeMapDivCtrl.prototype.transition = function (el, data) {\n  if (this.treeMap.transitioning || !data) {\n    return;\n  }\n\n  this.treeMap.transitioning = true;\n\n  var absX = 0, absY = 0, node = data;\n  while (node.meta.depth > this.currentDepth) {\n    absX += node.x;\n    absY += node.y;\n    node = node.parent;\n  }\n\n  // We need to delay the zoom transition to allow the fade-in transition of\n  // to fully end. This is solution is not ideal but chaining transitions like\n  // described at http://stackoverflow.com/a/17101823/981933 is infeasable\n  // since an unknown number of multiple selections has to be transitioned first\n  var transition = this.treeMap.element.transition().duration(750);\n\n  // Update the domain only after entering new elements.\n  this.treeMap.x.domain([0, data.dx]);\n  this.treeMap.y.domain([0, data.dy]);\n\n  var scaleX = this.treeMap.width / data.dx,\n      scaleY = this.treeMap.height / data.dy,\n      originX = absX + (data.dx / 2),\n      originY = absY + (data.dy / 2),\n      centerAdjustmentX = (this.treeMap.width / 2) - originX,\n      centerAdjustmentY = (this.treeMap.height / 2) - originY;\n\n  console.log(\n    'transform-origin: ' + (absX + (data.dx / 2)) + 'px ' + (absY + (data.dy / 2)) + 'px', 'scaleX(' + scaleX +') scaleY(' + scaleY +')',\n    centerAdjustmentX,\n    centerAdjustmentY,\n    'translate3d(-' + absX + 'px, -' + absY + 'px)'\n  );\n\n  this.treeMap.$element\n    .css('transform', 'translate3d(-' + (absX * scaleX) + 'px, -' + (absY * scaleY) + 'px, 0)');\n\n  // this.treeMap.$element\n  //   .css({\n  //     'transformOrigin': originX + 'px ' + originY + 'px',\n  //     'transform': 'translate(' + centerAdjustmentX + 'px, ' + centerAdjustmentY + 'px) scaleX(' + scaleX +') scaleY(' + scaleY +')'\n  //   });\n\n  this.treeMap.element.selectAll('.node')\n    .style('transition-delay', null)\n    .style('transition-duration', null)\n    .style('transform', 'rotate(0.1deg)')\n    .call(this.coordinates.bind(this));\n};\n\n\n/*\n * -----------------------------------------------------------------------------\n * Properties\n * -----------------------------------------------------------------------------\n */\n\nObject.defineProperty(\n  TreeMapDivCtrl.prototype,\n  'nodesAtLevel',\n  {\n    configurable: false,\n    enumerable: true,\n    value: [],\n    writable: true\n  }\n);\n\nObject.defineProperty(\n  TreeMapDivCtrl.prototype,\n  'data',\n  {\n    configurable: false,\n    enumerable: true,\n    value: null,\n    writable: true\n});\n\nObject.defineProperty(\n  TreeMapDivCtrl.prototype,\n  'mode',\n  {\n    configurable: false,\n    enumerable: true,\n    value: 'branch',\n    writable: true\n});\n\nObject.defineProperty(\n  TreeMapDivCtrl.prototype,\n  'visibleDepth',\n  {\n    configurable: false,\n    enumerable: true,\n    get: function () {\n      return this._visibleDepth;\n    },\n    set: function (visibleDepth) {\n      var oldLevel = this._visibleDepth;\n      this._visibleDepth = Math.max(1, visibleDepth);\n      this.adjustLevelDepth(oldLevel, this.visibleDepth);\n    }\n});\n\nObject.defineProperty(\n  TreeMapDivCtrl.prototype,\n  'treeMap',\n  {\n    configurable: false,\n    enumerable: true,\n    value: {},\n    writable: true\n});\n\nangular\n  .module('treeMapDiv')\n  .controller('TreeMapDivCtrl', [\n    '$window',\n    '$element',\n    '$',\n    'd3',\n    'neo4jD3',\n    'D3Colors',\n    TreeMapDivCtrl\n  ]);\n","function treeMapDivDirective () {\n  'use strict';\n\n  return {\n    controller: 'TreeMapDivCtrl',\n    controllerAs: 'treeMap',\n    restrict: 'E',\n    replace: true,\n    templateUrl: 'treeMapDiv/template.html'\n  };\n}\n\nangular\n  .module('treeMapDiv')\n  .directive('treeMapDiv', [\n    treeMapDivDirective\n  ]);\n","function Neo4J ($resource, $window) {\n  return function (url, user, password) {\n    return $resource(\n      url + '/db/data/transaction/commit/',\n      {},\n      {\n        query: {\n          method: 'POST',\n          headers: {\n            'Accept': 'application/json; charset=UTF-8',\n            'Content-type': 'application/json',\n            // Base64 encoding using `window.btoa`\n            'Authorization': 'Basic: ' + $window.btoa(user + ':' + password)\n          },\n          isArray: false,\n        }\n      }\n    );\n  };\n}\n\nangular\n  .module('neo4jD3')\n  .factory('Neo4J', [\n    '$resource',\n    '$window',\n    Neo4J\n  ]);\n","function buildTree (results) {\n  var child,\n      // Stores the children of each node..\n      // The only difference to `nodes` is that the `children` is an object\n      // holding the name of the child node.\n      childIndex = {\n        'owl:Thing': {}\n      },\n      currentChild,\n      currentDataSet,\n      currentParent,\n      data = results.data,\n      dataSet,\n      i,\n      lastNode,\n      len,\n      nodes = {\n        'owl:Thing': {\n          // Fortunately `owl:Thing` the mandatory root for any ontology.\n          name: 'owl:Thing',\n          children: []\n        }\n      },\n      parent;\n\n  // Determine which column corresponce to which node\n  len = results.columns.length;\n  for (i = 0; i < len; i++) {\n    switch (results.columns[i]) {\n      case 'child':\n        child = i;\n        break;\n      case 'dataSet':\n        dataSet = i;\n        break;\n      case 'parent':\n        parent = i;\n        break;\n    }\n  }\n\n  // Loop over all rows and build the tree\n  len = data.length;\n  for (i = 0; i < len; i++) {\n    // Cache for speed:\n    // Extensive object nesting is expensive;\n    currentChild = data[i].row[child];\n    currentDataSet = data[i].row[dataSet];\n    currentParent = data[i].row[parent];\n\n    if (!(currentParent.name in nodes)) {\n      nodes[currentParent.name] = {\n        children: [],\n        dataSets: [],\n        name: currentParent.name,\n        numDataSets: 0,\n        ontID: currentParent.name\n      };\n    }\n\n    if (!(currentChild.name in nodes)) {\n      nodes[currentChild.name] = {\n        children: [],\n        dataSets: [],\n        name: currentChild.name,\n        numDataSets: 0,\n        ontID: currentChild.name\n      };\n    }\n\n    if ('rdfs:label' in currentChild) {\n      nodes[currentChild.name].name = currentChild['rdfs:label'];\n    }\n\n    if ('uri' in currentChild) {\n      nodes[currentChild.name].uri = currentChild.uri;\n    }\n\n    if (currentDataSet !== null) {\n      nodes[currentChild.name].numDataSets++;\n      nodes[currentChild.name].dataSets.push(currentDataSet.uuid);\n    }\n\n    if (!(currentParent.name in childIndex)) {\n      childIndex[currentParent.name] = {};\n    }\n\n    if (!(currentChild.name in childIndex[currentParent.name])) {\n      nodes[currentParent.name].children.push(nodes[currentChild.name]);\n      childIndex[currentParent.name][currentChild.name] = true;\n    }\n  }\n\n  // Deep clone object to be usable by D3\n  return JSON.parse(JSON.stringify(nodes['owl:Thing']));\n}\n\nfunction Neo4jD3 ($q, Neo4J, settings) {\n  this.$q = $q;\n  this.Neo4J = new Neo4J(\n    settings.neo4jUrl,\n    settings.neo4jUser,\n    settings.neo4jPassword\n  );\n}\n\nNeo4jD3.prototype.get = function () {\n  if (this.d3 && typeof this.d3.value === 'function') {\n    return this.d3;\n  }\n\n  // Private\n  var d3Deferred = this.$q.defer();\n\n  this.Neo4J.query({\n      statements: [{\n        statement: \"MATCH (parent:cl:Class)<-[:`rdfs:subClassOf`]-(child) \" +\n          \"OPTIONAL MATCH (dataSet:DataSet)-[:`annotated_with`]->(child) \" +\n          \"RETURN parent, child, dataSet\"\n      }]\n    })\n    .$promise\n    .then(function (response) {\n      if (response.errors.length === 0) {\n        try {\n          var start = new Date().getTime();\n          var d3Data = buildTree(response.results[0]);\n          d3Deferred.resolve(d3Data);\n          var end = new Date().getTime();\n          var time = end - start;\n          console.log('Neo4J to D3 converter execution time: ' + time);\n        } catch (error) {\n          d3Deferred.reject(error);\n          console.error(error);\n        }\n      }\n      this.neo4jResponse = response;\n    }.bind(this))\n    .catch(function (error) {\n      d3Deferred.reject(error);\n      console.error(error);\n    });\n\n  this.d3 = d3Deferred.promise;\n};\n\nObject.defineProperty(\n  Neo4jD3.prototype,\n  'neo4jResponse', {\n    configurable: false,\n    enumerable: true,\n    writable: true\n});\n\nObject.defineProperty(\n  Neo4jD3.prototype,\n  'd3', {\n    configurable: false,\n    enumerable: true,\n    writable: true\n});\n\nangular\n  .module('neo4jD3')\n  .service('neo4jD3', [\n    '$q',\n    'Neo4J',\n    'settings',\n    Neo4jD3\n  ]);\n","angular\n  .module('treeMapApp', [\n    'templates',\n    'treeMap',\n    'treeMapDiv',\n    'globalEvents'\n  ]);\n","angular\n  .module('treeMap', [\n    'neo4jD3',\n    'd3Colors'\n  ]);\n","angular\n  .module('treeMapDiv', [\n    'neo4jD3',\n    'd3Colors'\n  ]);\n","angular\n  .module('color', []);\n","angular\n  .module('globalEvents', []);\n","angular\n  .module('neo4jD3', [\n    'ngResource'\n  ]);\n","angular\n  .module('treeMapApp')\n  .config([function () {}]);\n","angular\n  .module('treeMapApp')\n  .constant('$', jQuery)\n  .constant('_', _.noConflict())\n  .constant('d3', d3);\n","angular\n  .module('treeMapApp')\n  .constant('settings', {\n    'neo4jUrl': 'http://localhost:7474',\n    'neo4jUser': 'neo4j',\n    'neo4jPassword': '123',\n    'treeMapFadeInDuration': 333,\n    'treeMapZoomDuration': 666\n  });\n","angular\n  .module('color')\n  .factory('HEX', ['$injector', function ($injector) {\n    /**\n     * HEX constructor object\n     *\n     * @param   String  hex    The hex color string.\n     */\n    function HEX (hex) {\n      this.hex = hex;\n    }\n\n    /**\n     * Assign constructor to itself\n     *\n     * @type {Function}\n     */\n    HEX.prototype.constructor = HEX;\n\n    /**\n     * Convert HEX to RGB and then to HSL.\n     *\n     * @return  {Object}  HSL object.\n     */\n    HEX.prototype.toHsl = function () {\n      return this.toRgb().toHsl();\n    };\n\n    /**\n     * Convert HEX to RGB.\n     *\n     * @return  {Object}  RGB object.\n     */\n    HEX.prototype.toRgb = function () {\n      var RGB = $injector.get('RGB'),\n          result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(this.hex);\n\n      return new RGB(\n        parseInt(result[1], 16),\n        parseInt(result[2], 16),\n        parseInt(result[3], 16)\n      );\n    };\n\n    /**\n     * Convert HEX to String with a prepended hash\n     *\n     * @return  {String}  String represenation of HEX.\n     */\n    HEX.prototype.toString = function () {\n      return '#' + this.hex;\n    };\n\n    Object.defineProperty(HEX.prototype, 'hex', {\n      get: function() {\n        return this._hex;\n      },\n      set: function(hex) {\n        if (typeof hex === 'string') {\n          var match = hex.match(/^#?((?:[0-9a-fA-F]{3}){1,2})$/i);\n          if (!match) {\n            throw new Error('String \"' + hex + '\" is not a valid HEX color.');\n          }\n          hex = match[1];\n        } else {\n          throw new Error('HEX must be a string. ' + typeof hex);\n        }\n        this._hex = hex;\n      }\n    });\n\n    return HEX;\n  }]);\n","angular\n  .module('color')\n  .factory('HSL', ['$injector', function ($injector) {\n    /**\n     * HSL constructor object\n     *\n     * @param   String  HSL    The HSL color string.\n     */\n    function HSL (hue, saturation, lightness) {\n      if (typeof hue === 'object') {\n        this.lightness = hue.lightness;\n        this.saturation = hue.saturation;\n        this.hue = hue.hue;\n      } else {\n        this.hue = hue;\n        this.lightness = lightness;\n        this.saturation = saturation;\n      }\n    }\n\n    /**\n     * Assign constructor to itself\n     *\n     * @type {Function}\n     */\n    HSL.prototype.constructor = HSL;\n\n    /**\n     * Brighten the color by step-wise increase of lightness. If `noLast` is `true`\n     * the number of steps doesn't include the final white.\n     *\n     * @param   {Number}   steps   Number of steps.\n     * @param   {Boolean}  noLast  Skip last step, i.e. white.\n     * @return  {Array}            Array of adjusted HSL colors.\n     */\n    HSL.prototype.brighten = function (steps, noLast) {\n      var colors = [],\n          i = 0,\n          lStep = (1 - this.lightness) / (steps + (noLast ? 1 : 0));\n\n      while (i++ < steps) {\n        colors.push(new HSL(\n          this.hue,\n          this.saturation,\n          this.lightness + (i * lStep)\n        ));\n      }\n\n      return colors;\n    };\n\n    /**\n     * Convert HEX to RGB and then to HSL.\n     *\n     * @return  {Object}  HSL object.\n     */\n    HSL.prototype.toHex = function () {\n      return this.toRgb().toHex();\n    };\n\n    /**\n     * Converts an HSL color value to RGB. Conversion formula\n     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n     * Assumes h, s, and l are contained in the set [0, 1] and\n     * returns r, g, and b in the set [0, 255].\n     *\n     * @return  {Array}  The RGB representation\n     */\n    HSL.prototype.toRgb = function () {\n      var RGB = $injector.get('RGB'),\n          r, g, b;\n\n      function hueToRgb (p, q, t) {\n        if (t < 0) {\n          t++;\n        }\n        if (t > 1) {\n          t--;\n        }\n        if (t < 1/6) {\n          return p + (q - p) * 6 * t;\n        }\n        if (t < 1/2) {\n          return q;\n        }\n        if (t < 2/3) {\n          return p + (q - p) * (2/3 - t) * 6;\n        }\n        return p;\n      }\n\n      if (this.saturation === 0) {\n        r = g = b = this.lightness; // achromatic\n      } else {\n        var q = this.lightness < 0.5 ? this.lightness * (1 + this.saturation) : this.lightness + this.saturation - this.lightness * this.saturation;\n        var p = 2 * this.lightness - q;\n\n        r = hueToRgb(p, q, this.hue + 1/3);\n        g = hueToRgb(p, q, this.hue);\n        b = hueToRgb(p, q, this.hue - 1/3);\n      }\n\n      return new RGB(\n        Math.round(r * 255),\n        Math.round(g * 255),\n        Math.round(b * 255)\n      );\n    };\n\n    Object.defineProperty(HSL.prototype, 'hue', {\n      get: function() {\n        return this._hue;\n      },\n      set: function(hue) {\n        if (!(typeof hue === 'number' && hue >= 0 && hue <= 1)) {\n          throw new Error('Hue must be a float between 0 and 1.');\n        }\n        this._hue = hue;\n      }\n    });\n\n    Object.defineProperty(HSL.prototype, 'lightness', {\n      get: function() {\n        return this._lightness;\n      },\n      set: function(lightness) {\n        if (!(typeof lightness === 'number' && lightness >= 0 && lightness <= 1)) {\n          throw new Error('Lightness must be a float between 0 and 1.');\n        }\n        this._lightness = lightness;\n      }\n    });\n\n    Object.defineProperty(HSL.prototype, 'saturation', {\n      get: function() {\n        return this._saturation;\n      },\n      set: function(saturation) {\n        if (!(typeof saturation === 'number' && saturation >= 0 && saturation <= 1)) {\n          throw new Error('Saturation must be a float between 0 and 1.');\n        }\n        this._saturation = saturation;\n      }\n    });\n\n    return HSL;\n  }]);\n","angular\n  .module('color')\n  .service('RGB', ['$injector', function ($injector) {\n    /**\n     * RGB constructor object\n     *\n     * @param   Number  red    The red color value.\n     * @param   Number  green  The green color value.\n     * @param   Number  blue   The blue color value.\n     */\n    function RGB (red, green, blue) {\n      if (typeof red === 'object') {\n        this.blue = red.blue;\n        this.green = red.green;\n        this.red = red.red;\n      } else {\n        this.blue = blue;\n        this.green = green;\n        this.red = red;\n      }\n    }\n\n    /**\n     * Assign constructor to itself\n     *\n     * @type {Function}\n     */\n    RGB.prototype.constructor = RGB;\n\n    /**\n     * Converts the RGB color value to HSL. Conversion formula\n     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n     * Assumes r, g, and b are contained in the set [0, 255] and\n     * returns h, s, and l in the set [0, 1].\n     *\n     * @param   Number  r  The red color value.\n     * @param   Number  g  The green color value.\n     * @param   Number  b  The blue color value.\n     * @return  Array      The HSL representation.\n     */\n    RGB.prototype.toHsl = function () {\n      var r = this.red / 255,\n          g = this.green / 255,\n          b = this.blue / 255,\n          max = Math.max(r, g, b),\n          min = Math.min(r, g, b),\n          h,\n          s,\n          l = (max + min) / 2,\n          HSL = $injector.get('HSL');\n\n      if (max === min) {\n        h = s = 0; // achromatic\n      } else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch (max) {\n          case r:\n            h = (g - b) / d + (g < b ? 6 : 0);\n            break;\n          case g:\n            h = (b - r) / d + 2;\n            break;\n          case b:\n            h = (r - g) / d + 4;\n            break;\n        }\n        h /= 6;\n      }\n\n      return new HSL(\n        h,\n        s,\n        l\n      );\n    };\n\n    /**\n     * Converts the RGB color value to HEX.\n     *\n     * @param   Number  r  The red color value.\n     * @param   Number  g  The green color value.\n     * @param   Number  b  The blue color value.\n     * @return  String     The HEX representation.\n     */\n    RGB.prototype.toHex = function () {\n      var HEX = $injector.get('HEX');\n\n      return new HEX(\n        '#' + ((1 << 24) + (this.red << 16) + (this.green << 8) + this.blue).toString(16).slice(1)\n      );\n    };\n\n    RGB.prototype.luminosity = function (red, green, blue) {\n      // http://www.w3.org/TR/WCAG20/#relativeluminancedef\n      if (typeof red === 'undefined') {\n        red = this.red;\n        green = this.green;\n        blue = this.blue;\n      }\n\n      function lum (absValue) {\n        var relValue = absValue / 255;\n        return relValue <= 0.03928 ?\n          relValue / 12.92 : Math.pow(((relValue + 0.055) / 1.055), 2.4);\n      }\n\n      return 0.2126 * lum(red) + 0.7152 * lum(green) + 0.0722 * lum(blue);\n    };\n\n    RGB.prototype.contrast = function (color) {\n      // http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n      var lum1 = this.luminosity(this.red, this.green, this.blue);\n      var lum2 = this.luminosity(color.red, color.green, color.blue);\n      if (lum1 > lum2) {\n         return (lum1 + 0.05) / (lum2 + 0.05)\n      };\n      return (lum2 + 0.05) / (lum1 + 0.05);\n    };\n\n    Object.defineProperty(RGB.prototype, 'blue', {\n      get: function() {\n        return this._blue;\n      },\n      set: function(blue) {\n        if (!(Number(blue) === blue && blue % 1 === 0 && blue >= 0 && blue <= 255)) {\n          throw new Error('Blue must be an integer between 0 and 255.');\n        }\n        this._blue = blue;\n      }\n    });\n\n    Object.defineProperty(RGB.prototype, 'green', {\n      get: function() {\n        return this._green;\n      },\n      set: function(green) {\n        if (!(Number(green) === green && green % 1 === 0 && green >= 0 && green <= 255)) {\n          throw new Error('Green must be an integer between 0 and 255.');\n        }\n        this._green = green;\n      }\n    });\n\n    Object.defineProperty(RGB.prototype, 'red', {\n      get: function() {\n        return this._red;\n      },\n      set: function(red) {\n        if (!(Number(red) === red && red % 1 === 0 && red >= 0 && red <= 255)) {\n          throw new Error('Red must be an integer between 0 and 255.');\n        }\n        this._red = red;\n      }\n    });\n\n    return RGB;\n  }]);\n","angular\n  .module('d3Colors', ['color'])\n  .factory('D3Colors', [\n    'd3',\n    'HEX',\n    'HSL',\n    'RGB',\n    function (d3, HEX, HSL, RGB) {\n      /**\n       * D3Colors constructor object\n       */\n      function D3Colors (colors) {\n        this._colors = [];\n        this.colors = colors;\n      }\n\n      /**\n       * Assign constructor to itself\n       *\n       * @type {Function}\n       */\n      D3Colors.prototype.constructor = D3Colors;\n\n      D3Colors.prototype.getScaledFadedColors = function (steps) {\n        var fadedColors = [];\n        for (var i = 0, len = this.colors.length; i < len; i++) {\n          var hsl = this.colors[i].toHsl(),\n              colors = hsl.brighten(steps - 1, true);\n\n          // Prepend original color\n          colors.unshift(hsl);\n\n          // Convert HSL back to RGB\n          for (var j = 0; j < steps; j++) {\n            colors[j] = colors[j].toHex().toString();\n          }\n\n          // Merge set of fading colors\n          fadedColors = fadedColors.concat(colors);\n        }\n        return d3.scale.ordinal()\n          .domain(d3.range(this.colors.length * (steps + 1)))\n          .range(fadedColors);\n      };\n\n      Object.defineProperty(D3Colors.prototype, 'colors', {\n        get: function() {\n          return this._colors;\n        },\n        set: function(colors) {\n          if (!(colors && colors.length)) {\n            throw new Error('Colors needs to be an array.');\n          }\n          try {\n            for (var i = 0, len = colors.length; i < len; i++) {\n              this._colors.push(new HEX(colors[i]));\n            }\n          } catch (e) {\n            throw new Error('Colors needs to be an array.');\n          }\n        }\n      });\n\n      return D3Colors;\n    }\n  ]);\n","var GlobalEvents = (function () {\n  var private = {};\n\n  function GlobalEvents ($window, $, _) {\n    private.eventStack = {};\n\n    // Public\n    this._ = _;\n  }\n\n  GlobalEvents.prototype.off = function (event, index) {\n    if (event in private.eventStack && index in private.eventStack[event]) {\n      private.eventStack[event].splice(index, 1);\n      return true;\n    }\n\n    return false;\n  };\n\n  GlobalEvents.prototype.on = function (event, callback) {\n    if (event in private.eventStack) {\n      private.eventStack[event].push(callback);\n    } else {\n      private.eventStack[event] = [callback];\n    }\n\n    return private.eventStack[event].length - 1;\n  };\n\n  GlobalEvents.prototype.trigger = function (event) {\n    if (event in private.eventStack) {\n      var stack = private.eventStack[event];\n      for (var i = 0, len = stack.length; i < len; i++) {\n        if (this._.isFunction(stack[i])) {\n          stack[i]();\n        }\n      }\n    }\n  };\n\n  return GlobalEvents;\n}());\n\nangular\n  .module('globalEvents')\n  .service('globalEvents', [\n    '$window',\n    '$',\n    '_',\n    GlobalEvents\n  ]);\n"],"sourceRoot":"/source/"}