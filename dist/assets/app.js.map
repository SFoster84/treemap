{"version":3,"sources":["app/app.controller.js","app/treeMap/controller.js","app/treeMap/directive.js","app/treeMapDiv/controller.js","app/treeMapDiv/directive.js","common/neo4jD3/neo4j.js","common/neo4jD3/neo4jD3.js","app/app.module.js","app/treeMap/module.js","app/treeMapDiv/module.js","common/color/module.js","common/globalEvents/module.js","common/neo4jD3/module.js","app/app.config.js","app/app.libraries.js","app/app.settings.js","common/color/hex.js","common/color/hsl.js","common/color/rgb.js","common/d3Colors/d3Colors.js","common/globalEvents/service.js"],"names":["AppCtrl","$window","$","_","globalEvents","this","on","debounce","trigger","TreeMapCtrl","$element","$q","d3","neo4jD3","HEX","D3Colors","settings","$d3Element","find","_visibleDepth","currentLevel","treeMap","width","height","numColors","steps","colors","scale","category10","domain","range","getScaledFadedColors","x","linear","y","el","layout","treemap","children","d","depth","_children","sort","a","b","value","ratio","Math","sqrt","round","element","select","attr","append","style","node","grandParent","$grandParent","json","error","data","console","warn","draw","bind","treeMapDirective","controller","controllerAs","restrict","replace","templateUrl","TreeMapDivCtrl","currentDepth","classed","grandparent","then","treeMapDivDirective","Neo4J","$resource","url","user","password","query","method","headers","Accept","Content-type","Authorization","btoa","isArray","buildTree","results","child","currentChild","currentDataSet","currentParent","dataSet","i","len","parent","childIndex","owl:Thing","nodes","name","columns","length","row","dataSets","numDataSets","ontID","uri","push","uuid","JSON","parse","stringify","Neo4jD3","neo4jUrl","neo4jUser","neo4jPassword","angular","module","config","constant","jQuery","noConflict","treeMapFadeInDuration","treeMapZoomDuration","prototype","accumulateAndPrune","valueProp","accumulateAndPruneChildren","numChildren","meta","originalDepth","numChildChildren","call","pseudoNode","j","skipped","unshift","splice","leaf","addChildren","level","firstTime","childChildNode","that","promises","selectAll","enter","visibleDepth","each","childChildren","addInnerNodes","childrensLeafs","filter","leafs","color","rect","addLabel","animateEls","concat","fadeIn","all","addEventListeners","transition","__data__","parents","parentsWithChildren","innerNodes","colorRgb","contrastBlack","contrast","toRgb","contrastWhite","text","addLevelsOfNodes","oldLevel","currentInnerNodes","startLevel","remove","adjustLevelDepth","newLevel","removeLevelsOfNodes","hex","rgb","colorHex","colorMode","branchNo","min","max","revDepth","colorEl","attribute","display","setBreadCrumb","formerGroupWrapper","groupWrapper","datum","initialize","selection","defers","index","defer","promise","duration","random","delay","resolve","dx","dy","cache","elements","reduction","group","undefined","insert","transitioning","newGroupsTrans","formerGroupWrapperTrans","newGroups","e","Object","defineProperty","configurable","enumerable","writable","get","set","directive","classes","visibility","coordinates","aspectRatio","nodesAtLevel","$el","css","opacity","transform","requestNextAnimationFrame","parseInt","addClickListener","event","from","to","hidden","browseMode","mode","log","area","absX","absY","scaleX","scaleY","originX","originY","centerAdjustmentX","centerAdjustmentY","factory","$injector","constructor","toHsl","RGB","result","exec","toString","_hex","Error","match","HSL","hue","saturation","lightness","brighten","noLast","lStep","toHex","hueToRgb","p","q","t","r","g","_hue","_lightness","_saturation","service","red","green","blue","h","s","l","slice","luminosity","lum","absValue","relValue","pow","lum1","lum2","_blue","Number","_green","_red","_colors","fadedColors","hsl","ordinal","GlobalEvents","private","eventStack","off","callback","stack","isFunction","d3Deferred","statements","statement","$promise","response","errors","start","Date","getTime","d3Data","end","time","reject","neo4jResponse"],"mappings":"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","file":"app.js","sourcesContent":["function AppCtrl ($window, $, _, globalEvents) {\n  this.$ = $;\n  this._ = _;\n\n  this.$($window).on('resize orientationchange', this._.debounce(\n    function () {\n      globalEvents.trigger('resize');\n    },\n    250\n  ));\n}\n\nangular\n  .module('treeMapApp')\n  .controller('AppCtrl', [\n    '$window',\n    '$',\n    '_',\n    'globalEvents',\n    AppCtrl\n  ]);\n","/* global angular:false */\n\n/**\n * TreeMap controller constructor.\n *\n * @method  TreeMapCtrl\n * @author  Fritz Lekschas\n * @date    2015-08-04\n * @param   {Object}     $element  Directive's root element.\n * @param   {Object}     $q        Angular's promise service.\n * @param   {Object}     $         jQuery.\n * @param   {Object}     d3        D3.\n * @param   {Object}     neo4jD3   Neo4J to D3 converter.\n * @param   {Object}     HEX       HEX class.\n * @param   {Object}     D3Colors  Service for creating D3 color scalings.\n * @param   {Object}     settings  App wide this.settings.\n */\nfunction TreeMapCtrl ($element, $q, $, d3, neo4jD3, HEX, D3Colors, settings) {\n  this.$ = $;\n  this.$q = $q;\n  this.d3 = d3;\n  this.HEX = HEX;\n  this.$element = this.$($element),\n  this.$d3Element = this.$element.find('.treeMap svg');\n  this.settings = settings;\n\n  this._visibleDepth = 3;\n  this.currentLevel = 0;\n\n  this.treeMap.width = this.$d3Element.width();\n  this.treeMap.height = this.$d3Element.height();\n\n  this.numColors = 10;\n  this.steps = 6;\n\n  this.treeMap.colors = new D3Colors(\n    this.d3.scale.category10().domain(d3.range(this.numColors)).range()\n  ).getScaledFadedColors(this.steps);\n\n  this.treeMap.x = this.d3.scale.linear()\n    .domain([0, this.treeMap.width])\n    .range([0, this.treeMap.width]);\n\n  this.treeMap.y = this.d3.scale.linear()\n    .domain([0, this.treeMap.height])\n    .range([0, this.treeMap.height]);\n\n  this.treeMap.el = this.d3.layout.treemap()\n    .children(function(d, depth) { return depth ? null : d._children; })\n    .sort(function(a, b) { return a.value - b.value; })\n    .ratio(this.treeMap.height / this.treeMap.width * 0.5 * (1 + Math.sqrt(5)))\n    .round(false);\n\n  this.treeMap.element = this.d3.select(this.$d3Element[0])\n    .attr('viewBox', '0 0 ' + this.treeMap.width + ' ' + this.treeMap.height)\n    .append('g')\n      .style('shape-rendering', 'crispEdges');\n  this.treeMap.$element = this.$(this.treeMap.element.node());\n\n  this.treeMap.grandParent = this.d3.select('#back');\n  this.treeMap.$grandParent = this.$(this.treeMap.grandParent.node());\n\n  /* ---------------------------- [START: STATIC] --------------------------- */\n  this.d3.json('data/cl.json', function(error, data) {\n    if (error) return console.warn(error);\n    this.data = data;\n    this.draw();\n  }.bind(this));\n  /* ----------------------------- [END: STATIC] ---------------------------- */\n\n  /* ----------------------------- [START: LIVE] ---------------------------- */\n  // neo4jD3\n  //   .get()\n  //   .then(function (data) {\n  //     this.data = data;\n  //     this.draw();\n  //   }.bind(this));\n  /* ------------------------------ [END: LIVE] ----------------------------- */\n}\n\n/*\n * -----------------------------------------------------------------------------\n * Methods\n * -----------------------------------------------------------------------------\n */\n\n/**\n * Starter function for aggrgation and pruning.\n *\n * @method  addChildren\n * @author  Fritz Lekschas\n * @date    2015-08-04\n * @param   {Object}  data        D3 data object.\n * @param   {String}  valueProp   Name of the property holding the value.\n */\nTreeMapCtrl.prototype.accumulateAndPrune = function (data, valueProp) {\n  var numChildren = data.children ? data.children.length : false;\n  data.meta = data.meta || {};\n\n  if (numChildren) {\n    accumulateAndPruneChildren.call(this, data, numChildren, valueProp, 0);\n    if (data.value) {\n      data.value += data[valueProp];\n    } else {\n      data.value = data[valueProp];\n    }\n  }\n\n  /**\n   * Recursively accumulate `valueProp` values and prune _empty_ leafs.\n   *\n   * This function traverses all inner loops and stops one level BEFORE a leaf\n   * to be able to splice (delete) empty leafs from the list of children\n   *\n   * @method  addChildren\n   * @author  Fritz Lekschas\n   * @date    2015-08-04\n   * @param   {Object}   node         D3 data object of the node.\n   * @param   {Number}   numChildren  Number of children of `node.\n   * @param   {String}   valueProp    Property name of the propery holding the\n   *   value of the node's _size_.\n   * @param   {Number}   depth        Original depth of the current node.\n   * @param   {Boolean}  root         If node is the root.\n   */\n  function accumulateAndPruneChildren (node, numChildren, valueProp, depth) {\n    // A reference for later\n    node._children = node.children;\n    node.meta.originalDepth = depth;\n    var i = numChildren;\n    // We move in reverse order so that deleting nodes doesn't affect future\n    // indices.\n    while (i--) {\n      var child = node.children[i];\n      var numChildChildren = child.children ? child.children.length : false;\n\n      child.meta = child.meta || {};\n\n      if (numChildChildren) {\n        // Inner node.\n        accumulateAndPruneChildren.call(\n          this, child, numChildChildren, valueProp, depth + 1\n        );\n        numChildChildren = child.children.length;\n      }\n\n      // We check again the number of children of the child since it can happen\n      // that all children have been deleted meanwhile and the inner node became\n      // a leaf as well.\n      if (numChildChildren) {\n        // Inner node.\n        if (child[valueProp]) {\n          // Add own `numDataSets` to existing `value`.\n          child.value += child[valueProp];\n          // To represent this node visually in the tree map we need to create\n          // a \"fake\" child, i.e. pseudo node, holding the values of this inner\n          // node.\n          child.children.push({\n            name: child.name,\n            meta: {\n              originalDepth: child.depth + 1,\n              pseudoNode: true\n            },\n            value: child[valueProp]\n          });\n          child.children[child.children.length - 1][valueProp] = child[valueProp];\n        } else {\n          // We prune `child`, i.e. remove, a node in two cases\n          // A) `child` is the only child of `node` or\n          // B) `child` only has one child.\n          // This way we ensure that the out degree of `child` is two or higher.\n          if (numChildren === 1 || numChildChildren === 1) {\n            // We can remove the inner node since it wasn't used for any\n            // annotations.\n            for (var j = 0, len = child.children.length; j < len; j++) {\n              if (child.children[j].meta.skipped) {\n                child.children[j].meta.skipped.unshift(child.name);\n              } else {\n                child.children[j].meta.skipped = [child.name];\n              }\n              node.children.push(child.children[j]);\n            }\n            // Remove the child with the empty valueProp\n            node.children.splice(i, 1);\n          }\n        }\n      } else {\n        // Leaf.\n        if (!child[valueProp]) {\n          // Leaf was not used for annotation so we remove it.\n          node.children.splice(i, 1);\n          numChildren--;\n          continue;\n        } else {\n          // Set `value` of the leaf itself.\n          child.value = child[valueProp];\n          child.meta.leaf = true;\n          child.meta.originalDepth = depth + 1;\n        }\n      }\n\n      // Increase `value` if the node by the children's `numDataSets`.\n      if (typeof node.value !== 'undefined') {\n        node.value += child.value;\n      } else {\n        node.value = child.value;\n      }\n    }\n  }\n};\n\n/**\n * Recursively adds children to the parent for `this.visibleDepth` levels.\n *\n * @method  addChildren\n * @author  Fritz Lekschas\n * @date    2015-08-04\n * @param   {Object}   parent     D3 selection of parent.\n * @param   {Object}   data       D3 data object of `parent`.\n * @param   {Number}   level      Current level of depth.\n * @param   {Boolean}  firstTime  When `true` triggers a set of initializing\n *   animation.\n * @return  {Object}              D3 selection of `parent`'s children.\n */\nTreeMapCtrl.prototype.addChildren = function (parent, data, level, firstTime) {\n  var that = this,\n      childChildNode,\n      promises = [];\n\n  // Create a `g` wrapper for all children.\n  var children = parent.selectAll('.group-of-nodes')\n    .data(data._children)\n    .enter()\n      .append('g')\n      .attr('class', 'group-of-nodes');\n\n  // Recursion\n  if (level < this.currentLevel + this.visibleDepth) {\n    this.children[level + 1] = this.children[level + 1] || [];\n    children.each(function (data) {\n      if (data._children && data._children.length) {\n        var childChildren = that.addChildren(\n          that.d3.select(this), data, level + 1, firstTime);\n        that.children[level + 1].push(childChildren[0]);\n        promises.push(childChildren[1]);\n      }\n    });\n  } else {\n    /* Final level, i.e. `level === this.visibleDepth`.\n     *\n     * Since we only call the recursion as long as `level` is smaller than\n     * `this.visibleDepth` this else statement will only be reached when both\n     * variables are the same.\n     *\n     * On the final level we add \"inner nodes\"\n     */\n\n    childChildNode = this.addInnerNodes(children);\n  }\n\n  // D3 selection of all children without any children, i.e. leafs.\n  var childrensLeafs = children.filter(function(child) {\n      return !(child._children && child._children.length);\n    });\n\n  var leafs = childrensLeafs\n    .selectAll('.leaf-node')\n    .data(function (data) {\n      return [data];\n    })\n    .enter()\n    .append('g')\n      .attr('class', 'leaf-node')\n      .attr('opacity', 0);\n\n  leafs\n    .append('rect')\n      .attr('class', 'leaf')\n      .attr('fill', this.color.bind(this))\n      .call(this.rect.bind(this));\n\n  leafs\n    .call(this.addLabel.bind(this), 'name');\n\n  // Merge `leaf` and `childChildNode` selections. This turns out to be\n  var animateEls = leafs;\n  if (!leafs.length) {\n    animateEls = childrensLeafs;\n  }\n  if (childChildNode && childChildNode.length) {\n    animateEls[0] = animateEls[0].concat(childChildNode[0]);\n  }\n\n  promises = promises.concat(this.fadeIn(animateEls, firstTime));\n\n  return [children, this.$q.all(promises)];\n};\n\n/**\n * Adds global event listeners using jQuery.\n *\n * @method  addEventListeners\n * @author  Fritz Lekschas\n * @date    2015-08-04\n */\nTreeMapCtrl.prototype.addEventListeners = function () {\n  var that = this;\n\n  this.treeMap.$grandParent.on('click', 'a', function () {\n    /*\n     * that = TreeMapCtrl\n     * this = the clicked DOM element\n     * data = data\n     */\n    that.transition(this, this.__data__);\n  });\n  this.treeMap.$element.on(\n    'click',\n    '.label-wrapper, .outer-border',\n    function () {\n      /*\n       * that = TreeMapCtrl\n       * this = the clicked DOM element\n       * data = data\n       */\n      that.transition(this, this.__data__);\n    }\n  );\n};\n\n/**\n * Add inner nodes\n *\n * @method  addInnerNodes\n * @author  Fritz Lekschas\n * @date    2015-08-05\n * @param   {[type]}       parents  [description]\n */\nTreeMapCtrl.prototype.addInnerNodes = function (parents) {\n  // D3 selection of all children with children\n  var parentsWithChildren = parents.filter(function(parent) {\n    return parent._children && parent._children.length;\n  });\n\n  innerNodes = parentsWithChildren\n    .append('g')\n      .attr('class', 'inner-node')\n      .attr('opacity', 0);\n\n  innerNodes\n    .append('rect')\n      .attr('class', 'inner-border')\n      .attr('fill', this.color.bind(this))\n      .call(this.rect.bind(this), 1);\n\n  innerNodes\n    .append('rect')\n    .attr('class', 'outer-border')\n    .call(this.rect.bind(this));\n\n  innerNodes\n    .call(this.addLabel.bind(this), 'name');\n\n  return innerNodes;\n};\n\n/**\n * Appends a `foreignObject` into SVG holding a `DIV`\n *\n * @method  addLabel\n * @author  Fritz Lekschas\n * @date    2015-08-04\n * @param   {Object}    el    D3 selection.\n * @param   {String}    attr  Attribute name which holds the label's text.\n */\nTreeMapCtrl.prototype.addLabel = function (el, attr) {\n  var that = this;\n\n  el.append('foreignObject')\n    .attr('class', 'label-wrapper')\n    .call(this.rect.bind(this), 2)\n    .append('xhtml:div')\n      .attr('class', 'label')\n      .attr('title', function(data) {\n          return data[attr];\n      })\n      .classed('label-bright', function (data) {\n        if (data.meta.colorRgb) {\n          var contrastBlack = data.meta.colorRgb\n              .contrast(new that.HEX('#000000').toRgb()),\n            contrastWhite = data.meta.colorRgb\n              .contrast(new that.HEX('#ffffff').toRgb());\n          return contrastBlack < contrastWhite;\n        }\n      })\n      .text(function(data) {\n          return data[attr];\n      });\n};\n\n/**\n * Add levels of children starting from level `level` until `this.numLevels`.\n *\n * @method  addLevelsOfNodes\n * @author  Fritz Lekschas\n * @date    2015-08-03\n * @param   {Number}  oldLevel  Starting level.\n */\nTreeMapCtrl.prototype.addLevelsOfNodes = function (oldLevel) {\n  var currentInnerNodes = this.d3.selectAll('.inner-node'),\n    promises = [],\n    startLevel = this.currentLevel + oldLevel,\n    that = this;\n\n  this.children[startLevel + 1] = this.children[startLevel + 1] || [];\n  for (var i = 0, len = this.children[startLevel].length; i < len; i++) {\n    this.children[startLevel][i].each(function (data) {\n      if (data._children && data._children.length) {\n        var children = that.addChildren(\n          that.d3.select(this), data, startLevel + 1);\n        that.children[startLevel + 1].push(children[0]);\n        promises.push(children[1]);\n      }\n    });\n  }\n\n  // Remove formerly displayed inner nodes after all new inner nodes have been\n  // faded in.\n  this.$q.all(promises)\n    .then(function () {\n      currentInnerNodes.remove();\n    });\n};\n\n/**\n * Helper function that decides whether nodes have to be added or removed\n *\n * @method  adjustLevelDepth\n * @author  Fritz Lekschas\n * @date    2015-08-05\n * @param   {Number}  oldLevel  Former level of depth.\n * @param   {Number}  newLevel  New level of depth.\n */\nTreeMapCtrl.prototype.adjustLevelDepth = function (oldLevel, newLevel) {\n  var that = this;\n\n  if (oldLevel < newLevel) {\n    this.addLevelsOfNodes(oldLevel);\n  }\n  if (oldLevel > newLevel) {\n    this.removeLevelsOfNodes(oldLevel);\n  }\n};\n\n/**\n * Generate a color given an elements node data object.\n *\n * @method  color\n * @author  Fritz Lekschas\n * @date    2015-07-31\n * @param   {Object}  node  D3 node data object.\n * @return  {String}        HEX color string.\n */\nTreeMapCtrl.prototype.color = function (node) {\n  var hex, rgb;\n\n  if (node.meta.colorHex) {\n    return node.meta.colorHex;\n  }\n\n  if (this.colorMode === 'depth') {\n    // Color by original depth\n    // The deeper the node, the lighter the color\n    hex = this.treeMap.colors((node.meta.branchNo[0] * this.steps) +\n      Math.min(this.steps, node.meta.originalDepth) - 1);\n  } else {\n    // Default:\n    // Color by reverse final depth (after pruning). The fewer children a node\n    // has, the lighter the color. E.g. a leaf is lightest while the root is\n    // darkest.\n    hex = this.treeMap.colors((node.meta.branchNo[0] * this.steps) +\n      Math.max(0, this.steps - node.meta.revDepth - 1));\n  }\n\n  // Precompute RGB\n  rgb = new this.HEX(hex).toRgb();\n\n  // Cache colors for speed\n  node.meta.colorHex = hex;\n  node.meta.colorRgb = rgb;\n\n  return hex;\n}\n\n/**\n * Provide a color to a DOM's attribute\n *\n * @method  colorEl\n * @author  Fritz Lekschas\n * @date    2015-07-31\n * @param   {Object}    element    DOM element created by D3.\n * @param   {String}    attribute  Name of attribute that should be colored.\n */\nTreeMapCtrl.prototype.colorEl = function (element, attribute) {\n  element\n    .attr(attribute, this.color.bind(this));\n};\n\n/**\n * Display the data.\n *\n * @param   {Object}  node  D3 data object of the node.\n * @return  {Object}        D3 selection of node's children.\n */\nTreeMapCtrl.prototype.display = function (node, firstTime) {\n  var that = this;\n\n  this.setBreadCrumb(node);\n\n  // Keep a reference to the old wrapper\n  this.treeMap.formerGroupWrapper = this.treeMap.groupWrapper;\n\n  // Create a new wrapper group for the children.\n  this.treeMap.groupWrapper = this.treeMap.element\n    .append('g')\n    .datum(node)\n    .attr('class', 'depth');\n\n  // For completeness we store the children of level zero.\n  this.children[0] = [this.treeMap.groupWrapper];\n\n  var children = this.addChildren(\n    this.treeMap.groupWrapper, node, 1, firstTime);\n\n  // We have to cache the children to dynamically adjust the level depth.\n  this.children[1] = [children[0]];\n\n  return children;\n};\n\n/**\n * Draw the treemap.\n *\n * @method  draw\n * @author  Fritz Lekschas\n * @date    2015-08-03\n */\nTreeMapCtrl.prototype.draw = function () {\n  if (this.data === null) {\n    return false;\n  }\n\n  this.initialize(this.data);\n  this.accumulateAndPrune(this.data, 'numDataSets');\n  this.layout(this.data, 0);\n  this.display(this.data, true);\n\n  this.addEventListeners();\n};\n\n/**\n * Fade in a selection.\n *\n * @method  fadeIn\n * @author  Fritz Lekschas\n * @date    2015-08-05\n * @param   {Object}   selection  D3 selection.\n * @param   {Boolean}  firstTime  True if triggered the first time, i.e. after\n *   the page loaded.\n * @return  {Array}              Angular promises.\n */\nTreeMapCtrl.prototype.fadeIn = function (selection, firstTime) {\n  var defers = [],\n      promises = [],\n      that = this;\n\n  selection\n    .each(function (data, index) {\n      defers[index] = that.$q.defer();\n      promises[index] = defers[index].promise;\n    });\n\n  selection\n    .transition()\n    .duration(function () {\n      if (firstTime) {\n        return that.settings.treeMapFadeInDuration + (Math.random() * that.settings.treeMapFadeInDuration);\n      }\n      return that.settings.treeMapFadeInDuration;\n    })\n    .delay(function () {\n      if (firstTime) {\n        return Math.random() * that.settings.treeMapFadeInDuration;\n      }\n      return 0;\n    })\n    .attr('opacity', 1)\n    .each('end', function (data, index) {\n      defers[index].resolve();\n    });\n\n  return promises;\n};\n\n/**\n * Initialize the root node. This would usually be computed by `treemap()`.\n *\n * @method  initialize\n * @author  Fritz Lekschas\n * @date    2015-08-03\n * @param   {Object}  data  D3 data object.\n */\nTreeMapCtrl.prototype.initialize = function (data) {\n  data.x = data.y = 0;\n  data.dx = this.treeMap.width;\n  data.dy = this.treeMap.height;\n  data.depth = 0;\n  data.meta = {\n    branchNo: []\n  };\n};\n\n/**\n * Recursively compute the layout of each node depended on its parent.\n *\n * Compute the treemap layout recursively such that each group of siblings uses\n * the same size (1×1) rather than the dimensions of the parent cell. This\n * optimizes the layout for the current zoom state. Note that a wrapper object\n * is created for the parent node for each group of siblings so that the\n * parent's dimensions are not discarded as we recurse. Since each group of\n * sibling was laid out in 1×1, we must rescale to fit using absolute\n * coordinates. This lets us use a viewport to zoom.\n *\n * @method  layout\n * @author  Fritz Lekschas\n * @date    2015-08-03\n * @param   {Object}  data  D3 data object.\n */\nTreeMapCtrl.prototype.layout = function (parent, depth) {\n  // Initialize a cache object used later\n  parent.cache = {};\n  parent.meta.depth = depth;\n  if (parent._children && parent._children.length) {\n    this.depth = Math.max(this.depth, depth + 1);\n    // This creates an anonymous 1px x 1px treemap and sets the children's\n    // coordinates accordingly.\n    this.treeMap.el({_children: parent._children});\n    for (var i = 0, len = parent._children.length; i < len; i++) {\n      var child = parent._children[i];\n      child.x = parent.x + child.x * parent.dx;\n      child.y = parent.y + child.y * parent.dy;\n      child.dx *= parent.dx;\n      child.dy *= parent.dy;\n      child.parent = parent;\n\n      child.meta.branchNo = parent.meta.branchNo.concat([i]);\n\n      this.layout(child, depth + 1);\n      parent.meta.revDepth = Math.max(\n        child.meta.revDepth + 1,\n        parent.meta.revDepth || 0\n      )\n    }\n  } else {\n    // Leaf\n    // Leafs have a reverse depth of zero.\n    parent.meta.revDepth = 0;\n  }\n};\n\n/**\n * Set the coordinates of the rectangular.\n *\n * How to invoke:\n * `d3.selectAll('rect').call(this.rect.bind(this))`\n *\n * Note: This weird looking double this is needed as the context of a `call`\n * function is actually the same as the selection passed to it, which seems\n * redundant but that's how it works right now. So to assign `TreeMapCtrl` as\n * the context we have to manually bind `this`.\n *\n * URL: https://github.com/mbostock/d3/wiki/Selections#call\n *\n * @method  rect\n * @author  Fritz Lekschas\n * @date    2015-08-03\n * @param   {Array}  elements  D3 selection of DOM elements.\n */\nTreeMapCtrl.prototype.rect = function (elements, reduction) {\n  var that = this;\n\n  reduction = reduction || 0;\n\n  elements\n    .attr('x', function (data) {\n      return that.treeMap.x(data.x) + reduction;\n    })\n    .attr('y', function (data) {\n      return that.treeMap.y(data.y) + reduction;\n    })\n    .attr('width', function (data) {\n      data.cache.width = Math.max(0, (\n        that.treeMap.x(data.x + data.dx)\n        - that.treeMap.x(data.x)\n        - (2 * reduction)\n      ));\n\n      return data.cache.width;\n    })\n    .attr('height', function (data) {\n      data.cache.height = Math.max(0, (\n        that.treeMap.y(data.y + data.dy)\n        - that.treeMap.y(data.y)\n        - (2 * reduction)\n      ));\n\n      return data.cache.height;\n    });\n};\n\n/**\n * Remove all levels until `newLevel`.\n *\n * @method  removeLevelsOfNodes\n * @author  Fritz Lekschas\n * @date    2015-08-05\n * @param   {Number}  oldLevel  Former level of depth.\n */\nTreeMapCtrl.prototype.removeLevelsOfNodes = function (oldLevel) {\n    var i,\n      len,\n      startLevel = this.currentLevel + this.visibleDepth,\n      that = this;\n\n    // Add inner nodes to `.group-of-nodes` at `startLevel`.\n    for (i = 0, len = this.children[startLevel].length; i < len; i++) {\n      this.children[startLevel][i].each(function (data) {\n        that.fadeIn(that.addInnerNodes(that.d3.select(this)));\n      });\n    }\n\n    // Remove all children deeper than what is specified.\n    for (i = 0, len = this.children[startLevel + 1].length; i < len; i++) {\n      var group = this.children[startLevel + 1][i].transition().duration(250);\n\n      // Fade groups out and remove them\n      group\n        .style('opacity', 0)\n        .remove();\n    }\n    // Unset intemediate levels\n    for (i = startLevel + 1; i <= oldLevel; i++) {\n      this.children[i] = undefined;\n    }\n};\n\n/**\n * Set breadcrumb navigation from the current `node` to the root.\n *\n * @method  setBreadCrumb\n * @author  Fritz Lekschas\n * @date    2015-08-03\n * @param   {Object}  node  D3 data object.\n */\nTreeMapCtrl.prototype.setBreadCrumb = function (node) {\n  this.treeMap.grandParent.selectAll('li').remove();\n\n  var parent = node,\n      that = this;\n\n  if (!node.parent) {\n    this.treeMap.grandParent\n      .append('li')\n        .attr('class', 'inactive')\n        .text(node.name);\n  } else {\n    parent = node.parent;\n    while (parent) {\n      this.treeMap.grandParent\n        .insert('li', 'li:first-child')\n          .append('a')\n            .datum(parent)\n            .text(parent.name);\n\n      node = parent;\n      parent = node.parent;\n    }\n  }\n};\n\n/**\n * Transition between parent and child branches of the treemap.\n *\n * @method  transition\n * @author  Fritz Lekschas\n * @date    2015-08-03\n * @param   {Object}  data  D3 data object of the node to transition to.\n */\nTreeMapCtrl.prototype.transition = function (el, data) {\n  if (this.treeMap.transitioning || !data) {\n    return;\n  }\n\n  this.currentLevel = data.meta.depth;\n\n  this.treeMap.transitioning = true;\n\n  var newGroups = this.display.call(this, data),\n      newGroupsTrans, formerGroupWrapper, formerGroupWrapperTrans;\n\n  // After all newly added inner nodes and leafs have been faded in we call the\n  // zoom transition.\n  newGroups[1]\n    .then(function () {\n      // Fade in animations finished\n      newGroups = newGroups[0];\n      newGroupsTrans = newGroupsTrans = newGroups\n        .transition()\n        .duration(this.settings.treeMapZoomDuration);\n      formerGroupWrapper = this.treeMap.formerGroupWrapper;\n      formerGroupWrapperTrans = formerGroupWrapper\n        .transition()\n        .duration(this.settings.treeMapZoomDuration);\n\n      // Update the domain only after entering new elements.\n      this.treeMap.x.domain([data.x, data.x + data.dx]);\n      this.treeMap.y.domain([data.y, data.y + data.dy]);\n\n      // Enable anti-aliasing during the transition.\n      this.treeMap.element.style('shape-rendering', null);\n\n      // Fade-in entering text.\n      newGroups.selectAll('.label-wrapper')\n        .style('fill-opacity', 0);\n\n      formerGroupWrapperTrans.selectAll('.inner-border')\n        .call(this.rect.bind(this), 1);\n\n      formerGroupWrapperTrans.selectAll('.outer-border, .leaf')\n        .call(this.rect.bind(this));\n\n      formerGroupWrapperTrans.selectAll('.label-wrapper')\n        .call(this.rect.bind(this), 2);\n\n      newGroupsTrans.selectAll('.inner-border')\n        .call(this.rect.bind(this), 1);\n\n      newGroupsTrans.selectAll('.outer-border, .leaf')\n        .call(this.rect.bind(this));\n\n      newGroupsTrans.selectAll('.label-wrapper')\n        .style('fill-opacity', 1)\n        .call(this.rect.bind(this), 2);\n\n      // Remove the old node when the transition is finished.\n      formerGroupWrapperTrans.remove()\n        .each('end', function() {\n          this.treeMap.element.style('shape-rendering', 'crispEdges');\n          this.treeMap.transitioning = false;\n        }.bind(this));\n    }.bind(this))\n    .catch(function (e) {\n      console.error(e);\n    });\n};\n\n\n/*\n * -----------------------------------------------------------------------------\n * Properties\n * -----------------------------------------------------------------------------\n */\n\n/**\n * Holds all nodes per level.\n *\n * @author  Fritz Lekschas\n * @date    2015-08-04\n * @type    {Array}\n */\nObject.defineProperty(\n  TreeMapCtrl.prototype,\n  'children',\n  {\n    configurable: false,\n    enumerable: true,\n    value: [],\n    writable: true\n  }\n);\n\n/**\n * D3 data object.\n *\n * @author  Fritz Lekschas\n * @date    2015-08-04\n * @type    {Boolean}\n */\nObject.defineProperty(\n  TreeMapCtrl.prototype,\n  'data',\n  {\n    configurable: false,\n    enumerable: true,\n    value: {},\n    writable: true\n});\n\n/**\n * Depth of the pruned data tree.\n *\n * @author  Fritz Lekschas\n * @date    2015-08-04\n * @type    {Number}\n */\nObject.defineProperty(\n  TreeMapCtrl.prototype,\n  'depth',\n  {\n    configurable: false,\n    enumerable: true,\n    value: 0,\n    writable: true\n});\n\n/**\n * Number of visible levels below the current level.\n *\n * @author  Fritz Lekschas\n * @date    2015-08-04\n * @type    {Number}\n */\nObject.defineProperty(\n  TreeMapCtrl.prototype,\n  'visibleDepth',\n  {\n    configurable: false,\n    enumerable: true,\n    get: function () {\n      return this._visibleDepth;\n    },\n    set: function (visibleDepth) {\n      var oldLevel = this._visibleDepth;\n      this._visibleDepth = Math.min(Math.max(1, visibleDepth), this.depth);\n      this.adjustLevelDepth(oldLevel, this.visibleDepth);\n    }\n});\n\n/**\n * Object holding the actual D3 treemap and related data.\n *\n * @type  {Object}\n */\nObject.defineProperty(\n  TreeMapCtrl.prototype,\n  'treeMap',\n  {\n    configurable: false,\n    enumerable: true,\n    value: {},\n    writable: true\n});\n\nangular\n  .module('treeMap')\n  .controller('TreeMapCtrl', [\n    '$element',\n    '$q',\n    '$',\n    'd3',\n    'neo4jD3',\n    'HEX',\n    'D3Colors',\n    'settings',\n    TreeMapCtrl\n  ]);\n","function treeMapDirective () {\n  'use strict';\n\n  return {\n    controller: 'TreeMapCtrl',\n    controllerAs: 'treeMap',\n    restrict: 'E',\n    replace: true,\n    templateUrl: 'treeMap/template.html'\n  };\n}\n\nangular\n  .module('treeMap')\n  .directive('treeMap', [\n    treeMapDirective\n  ]);\n","/* global angular:false */\n\nfunction TreeMapDivCtrl ($window, $element, $, d3, neo4jD3, D3Colors) {\n  this.$window = $window;\n  this.$ = $;\n  this.d3 = d3;\n  this.$element = this.$($element),\n  this.$d3Element = this.$element.find('.treeMap');\n\n  /**\n   * Current level of depth. By default starting at the root, e.g. zero.\n   *\n   * @type  {Number}\n   */\n  this.currentDepth = 0;\n\n  this._visibleDepth = 3;\n\n  this.treeMap.width = this.$d3Element.width();\n  this.treeMap.height = this.$d3Element.height();\n\n  this.numColors = 10;\n  this.steps = 6;\n\n  this.treeMap.colors = new D3Colors(\n    this.d3.scale.category10().domain(d3.range(this.numColors)).range()\n  ).getScaledFadedColors(this.steps);\n\n  this.treeMap.x = this.d3.scale.linear()\n    .domain([0, this.treeMap.width])\n    .range([0, this.treeMap.width]);\n\n  this.treeMap.y = this.d3.scale.linear()\n    .domain([0, this.treeMap.height])\n    .range([0, this.treeMap.height]);\n\n  this.treeMap.el = this.d3.layout.treemap()\n    .children(function(d, depth) { return depth ? null : d._children; })\n    .sort(function(a, b) { return a.value - b.value; })\n    .ratio(this.treeMap.height / this.treeMap.width * 0.5 * (1 + Math.sqrt(5)))\n    .round(false);\n\n  this.treeMap.element = this.d3.select(this.$d3Element[0]).append('div')\n    .classed('wrapper', true);\n\n  this.treeMap.$element = $(this.treeMap.element[0]);\n\n  this.treeMap.grandparent = this.d3.select('#back');\n\n  neo4jD3.d3\n    .then(function (data) {\n      this.data = data;\n      this.draw();\n    }.bind(this));\n}\n\n/*\n * -----------------------------------------------------------------------------\n * Methods\n * -----------------------------------------------------------------------------\n */\n\n/**\n * Starter function for aggrgation and pruning.\n *\n * @param  {Object} data       D3 data object.\n * @param  {String} valueProp  Name of the property holding the value.\n */\nTreeMapDivCtrl.prototype.accumulateAndPrune = function (data, valueProp) {\n  var numChildren = data.children ? data.children.length : false;\n  data.meta = data.meta || {};\n\n  if (numChildren) {\n    accumulateAndPruneChildren.call(this, data, numChildren, valueProp, 0);\n    if (data.value) {\n      data.value += data[valueProp];\n    } else {\n      data.value = data[valueProp];\n    }\n  }\n\n  /**\n   * Recursively accumulate `valueProp` values and prune _empty_ leafs.\n   *\n   * This function traverses all inner loops and stops one level BEFORE a leaf\n   * to be able to splice (delete) empty leafs from the list of children\n   *\n   * @param  {Object}   node         D3 data object of the node.\n   * @param  {Number}   numChildren  Number of children of `node.\n   * @param  {String}   valueProp    Property name of the propery holding the value of the node's _size_.\n   * @param  {Number}   depth        Original depth of the current node.\n   * @param  {Boolean}  root         If node is the root.\n   */\n  function accumulateAndPruneChildren (node, numChildren, valueProp, depth) {\n    // A reference for later\n    node._children = node.children;\n    node.meta.originalDepth = depth;\n    var i = numChildren;\n    // We move in reverse order so that deleting nodes doesn't affect future\n    // indices.\n    while (i--) {\n      var child = node.children[i];\n      var numChildChildren = child.children ? child.children.length : false;\n\n      child.meta = child.meta || {};\n\n      if (numChildChildren) {\n        // Inner node.\n        accumulateAndPruneChildren.call(\n          this, child, numChildChildren, valueProp, depth + 1\n        );\n        numChildChildren = child.children.length;\n      }\n\n      // We check again the number of children of the child since it can happen\n      // that all children have been deleted meanwhile and the inner node became\n      // a leaf as well.\n      if (numChildChildren) {\n        // Inner node.\n        if (child[valueProp]) {\n          // Add own `numDataSets` to existing `value`.\n          child.value += child[valueProp];\n          // To represent this node visually in the tree map we need to create\n          // a \"fake\" child, i.e. pseudo node, holding the values of this inner\n          // node.\n          child.children.push({\n            name: child.name,\n            meta: {\n              originalDepth: child.depth + 1,\n              pseudoNode: true\n            },\n            value: child[valueProp]\n          });\n          child.children[child.children.length - 1][valueProp] = child[valueProp];\n        } else {\n          // We prune `child`, i.e. remove, a node in two cases\n          // A) `child` is the only child of `node` or\n          // B) `child` only has one child.\n          // This way we ensure that the out degree of `child` is two or higher.\n          if (numChildren === 1 || numChildChildren === 1) {\n            // We can remove the inner node since it wasn't used for any\n            // annotations.\n            for (var j = 0, len = child.children.length; j < len; j++) {\n              if (child.children[j].meta.skipped) {\n                child.children[j].meta.skipped.unshift(child.name);\n              } else {\n                child.children[j].meta.skipped = [child.name];\n              }\n              node.children.push(child.children[j]);\n            }\n            // Remove the child with the empty valueProp\n            node.children.splice(i, 1);\n          }\n        }\n      } else {\n        // Leaf.\n        if (!child[valueProp]) {\n          // Leaf was not used for annotation so we remove it.\n          node.children.splice(i, 1);\n          numChildren--;\n          continue;\n        } else {\n          // Set `value` of the leaf itself.\n          child.value = child[valueProp];\n          child.meta.leaf = true;\n          child.meta.originalDepth = depth + 1;\n        }\n      }\n\n      // Increase `value` if the node by the children's `numDataSets`.\n      if (typeof node.value !== 'undefined') {\n        node.value += child.value;\n      } else {\n        node.value = child.value;\n      }\n    }\n  }\n};\n\n\n/**\n * Recursively add nodes level by level.\n *\n * @method  addChildren\n * @author  Fritz Lekschas\n * @date    2015-08-01\n * @param   {[type]}     parent  [description]\n * @param   {[type]}     data    [description]\n * @param   {[type]}     level   [description]\n */\nTreeMapDivCtrl.prototype.addChildren = function (\n  parent, data, level, firstTime) {\n  var that = this;\n\n  // Create nodes\n  var nodes = parent.selectAll('div')\n    .data(data._children)\n    .enter()\n      .append('div')\n      .attr('class', function (node) {\n        var classes = 'node';\n        if (node._children && node._children.length) {\n          classes += ' inner-node';\n        } else {\n          classes += ' leaf';\n          node.visibility = true;\n        }\n        if (level == this.visibleDepth) {\n          classes += ' last';\n          node.visibility = true;\n        }\n        // Hide nodes if they are deeper than the specified `depth`\n        if (level > this.visibleDepth) {\n          classes += ' hidden';\n        }\n        return classes;\n      }.bind(this))\n      .attr('title', function (node) {\n        return node.uri;\n      })\n      .style('background-color', function (node) {\n        if (node.visibility) {\n          return this.color(node);\n        }\n      }.bind(this))\n      .call(that.coordinates.bind(that));\n\n  // Add name to nodes\n  nodes.append('span')\n    .attr('class', function (node) {\n      var classes = 'name';\n      if (node.meta.aspectRatio < 1) {\n        classes += ' rotated';\n      }\n      return classes;\n    })\n    .text(function(node) { return node.name; });\n\n  this.nodesAtLevel[level + 1] = this.nodesAtLevel[level + 1] || [];\n\n  nodes.each(function (node) {\n\n    if (firstTime && node.visibility) {\n      var $el = $(this);\n\n      $el\n        .css({\n          'opacity': 0,\n          'transform': 'scale(0.9)'\n        });\n\n      that.$window.requestNextAnimationFrame(function() {\n        $el\n          .css('transitionDuration', function () {\n            return ((500 + parseInt(Math.random() * 750)) / 1000) + 's';\n          })\n          .css('transitionDelay', function () {\n            return (parseInt(Math.random() * 500) / 1000) + 's';\n          })\n          .css({\n            'opacity': 1,\n            'transform': 'scale(1)'\n          });\n      });\n    }\n\n    if (node._children && node._children.length) {\n      // Recursion\n      that.nodesAtLevel[level + 1].push(\n        that.addChildren(that.d3.select(this), node, level + 1, firstTime)\n      );\n    }\n  });\n\n  return nodes;\n};\n\nTreeMapDivCtrl.prototype.addClickListener = function () {\n  var that = this;\n\n  $(this.treeMap.element[0]).on('click', '.inner-node.last', function (event) {\n    // D3 hard links data with DOM elements and stores it under the `__data__`\n    // property.\n    that.transition(this, this.__data__);\n  });\n};\n\nTreeMapDivCtrl.prototype.adjustLevelDepth = function (oldLevel, newLevel) {\n  if (oldLevel === newLevel) {\n    return;\n  }\n\n  var from, to, i, j, hidden;\n\n  if (oldLevel < newLevel) {\n    from = oldLevel - 1;\n    to = newLevel;\n  } else {\n    // Remove all children deeper than what is specified.\n    hidden = true;\n    from = newLevel - 1;\n    to = oldLevel;\n  }\n\n  for (i = 0, len = this.nodesAtLevel[newLevel].length; i < len; i++) {\n    // Show nodes at current level\n    this.nodesAtLevel[newLevel][i]\n      .classed('last', true)\n      .classed('hidden', false);\n  }\n\n  for (i = 0, len = this.nodesAtLevel[oldLevel].length; i < len; i++) {\n    // Hide nodes at former level\n    this.nodesAtLevel[oldLevel][i]\n      .classed('last', false)\n      .classed('hidden', true);\n  }\n\n\n  // `from` and `to` are included in the loop.\n  while (from++ < to) {\n    for (i = 0, len = this.nodesAtLevel[from].length; i < len; i++) {\n      this.nodesAtLevel[from][i]\n        .style('background-color', function (node) {\n          if (from === newLevel || node.meta.revDepth === 0) {\n            return this.color(node);\n          }\n        }.bind(this))\n        .classed('last', function (node) {\n          if (from === newLevel) {\n            return true;\n          }\n        })\n        .classed('hidden', function (node) {\n          if (hidden && from === newLevel) {\n            return false;\n          }\n          return hidden;\n        });\n    }\n  }\n};\n\n/**\n * Set the browsing mode.\n *\n * @param  {String}  mode  Name of the mode.\n */\nTreeMapDivCtrl.prototype.browseMode = function (mode) {\n  this.mode = mode;\n};\n\n/**\n * Generate a color given an elements node data object.\n *\n * @method  color\n * @author  Fritz Lekschas\n * @date    2015-07-31\n * @param   {Object}  node  D3 node data object.\n * @return  {String}        HEX color string.\n */\nTreeMapDivCtrl.prototype.color = function (node) {\n  if (this.colorMode === 'depth') {\n    // Color by original depth\n    // The deeper the node, the lighter the color\n    return this.treeMap.colors((node.meta.branchNo[0] * this.steps) +\n      Math.min(this.steps, node.meta.originalDepth) - 1);\n  }\n  // Default:\n  // Color by reverse final depth, i.e. after pruning. The fewer children a node\n  // has, the lighter the color. E.g. a leaf is lightest while the root is\n  // darkest.\n  return this.treeMap.colors((node.meta.branchNo[0] * this.steps) +\n    Math.max(0, this.steps - node.meta.revDepth - 1));\n}\n\n/**\n * Provide a color to a DOM's attribute\n *\n * @method  colorEl\n * @author  Fritz Lekschas\n * @date    2015-07-31\n * @param   {Object}    element    DOM element created by D3.\n * @param   {String}    attribute  Name of attribute that should be colored.\n */\nTreeMapDivCtrl.prototype.colorEl = function (element, attribute) {\n  element\n    .attr(attribute, this.color.bind(this));\n};\n\n/**\n * Display the data.\n *\n * @param   {Object}  node  D3 data object of the node.\n * @return  {Object}        D3 selection of node's children.\n */\nTreeMapDivCtrl.prototype.display = function (node, firstTime) {\n  var that = this;\n\n  // Update the grand parent, which is kind of the \"back button\"\n  this.treeMap.grandparent\n    .datum(node.parent)\n    .on(\"click\", function (data) {\n      /*\n       * that = TreeMapDivCtrl\n       * this = the clicked DOM element\n       * data = data\n       */\n      that.transition.call(that, this, data);\n    })\n    .text(this.name(node));\n\n  this.treeMap.element\n    .datum(node);\n\n  // For completeness we store the children of level zero.\n  this.nodesAtLevel[0] = [this.treeMap.element];\n\n  var children = this.addChildren.call(\n    this, this.treeMap.element, node, 1, firstTime);\n\n  // We have to cache the children to dynamically adjust the level depth.\n  this.nodesAtLevel[1] = [children];\n\n  return children;\n};\n\n/**\n * Draw the treemap.\n */\nTreeMapDivCtrl.prototype.draw = function () {\n  if (this.data === null) {\n    return false;\n  }\n\n  console.log('vdepth ' + this.visibleDepth);\n\n  this.initialize(this.data);\n  this.accumulateAndPrune(this.data, 'numDataSets');\n  this.layout(this.data, 0);\n  this.display(this.data, true);\n  this.addClickListener();\n};\n\n/**\n * Initialize the root node. This would usually be computed by `treemap()`.\n *\n * @param  {Object} data  D3 data object.\n */\nTreeMapDivCtrl.prototype.initialize = function (data) {\n  data.x = data.y = 0;\n  data.dx = this.treeMap.width;\n  data.dy = this.treeMap.height;\n  data.depth = 0;\n  data.meta = {\n    branchNo: []\n  };\n};\n\n/**\n * Recursively compute the layout of each node depended on its parent.\n *\n * Compute the treemap layout recursively such that each group of siblings uses\n * the same size (1×1) rather than the dimensions of the parent cell. This\n * optimizes the layout for the current zoom state. Note that a wrapper object\n * is created for the parent node for each group of siblings so that the\n * parent's dimensions are not discarded as we recurse. Since each group of\n * sibling was laid out in 1×1, we must rescale to fit using absolute\n * coordinates. This lets us use a viewport to zoom.\n *\n * @param  {Object}  data  D3 data object.\n */\nTreeMapDivCtrl.prototype.layout = function (parent, depth) {\n  parent.meta.depth = depth;\n  if (parent._children && parent._children.length) {\n    this.treeMap.depth = Math.max(this.treeMap.depth, depth + 1);\n    // This creates an anonymous 1px x 1px treemap and sets the children's\n    // coordinates accordingly.\n    this.treeMap.el({_children: parent._children});\n    for (var i = 0, len = parent._children.length; i < len; i++) {\n      var child = parent._children[i];\n      child.x = child.x * parent.dx;\n      child.y = child.y * parent.dy;\n      child.dx *= parent.dx;\n      child.dy *= parent.dy;\n      child.parent = parent;\n\n      // Store aspect ration and area for later font styling\n      child.meta.aspectRatio = child.dx / child.dy;\n      child.meta.area = child.dy * child.dx;\n\n      // Keep a reference of the branches that have been taken\n      child.meta.branchNo = parent.meta.branchNo.concat([i]);\n\n      // Recursion\n      this.layout(child, depth + 1);\n\n      // Take the max reverse depth when we visite the inner node the second\n      // time.\n      parent.meta.revDepth = Math.max(\n        child.meta.revDepth + 1,\n        parent.meta.revDepth || 0\n      )\n    }\n  } else {\n    // Leaf\n    // Leafs have a reverse depth of zero.\n    parent.meta.revDepth = 0;\n  }\n};\n\n/**\n * Generate the name of the node.\n *\n * @param   {Object}  data  Node's D3 data object.\n * @return  {String}        Name of the node.\n */\nTreeMapDivCtrl.prototype.name = function (data) {\n    return data.parent ? this.name(data.parent) + \".\" + data.name : data.name;\n};\n/**\n * Set the coordinates of the rectangular.\n *\n * How to invoke:\n * `d3.selectAll('rect').call(this.rect.bind(this))`\n *\n * Note: This weird looking double this is needed as the context of a `call`\n * function is actually the same as the selection passed to it, which seems\n * redundant but that's how it works right now. So to assign `TreeMapDivCtrl` as\n * the context we have to manually bind `this`.\n *\n * URL: https://github.com/mbostock/d3/wiki/Selections#call\n *\n * @param  {Array}  elements  D3 selection of DOM elements.\n */\nTreeMapDivCtrl.prototype.coordinates = function (elements) {\n  var that = this;\n\n  elements\n    .style('left', function (data) {\n      return that.treeMap.x(data.x) + 'px';\n    })\n    .style('top', function (data) {\n      return that.treeMap.y(data.y) + 'px';\n    })\n    .style('width', function (data) {\n      return (that.treeMap.x(data.x + data.dx) - that.treeMap.x(data.x)) + 'px';\n    })\n    .style('height', function (data) {\n      return (that.treeMap.y(data.y + data.dy) - that.treeMap.y(data.y)) + 'px';\n    });\n};\n\n/**\n * Transition between parent <> child branches of the treemap.\n *\n * @param   {Object}  data  D3 data object of the node to transition to.\n */\nTreeMapDivCtrl.prototype.transition = function (el, data) {\n  if (this.treeMap.transitioning || !data) {\n    return;\n  }\n\n  this.treeMap.transitioning = true;\n\n  var absX = 0, absY = 0, node = data;\n  while (node.meta.depth > this.currentDepth) {\n    absX += node.x;\n    absY += node.y;\n    node = node.parent;\n  }\n\n  // We need to delay the zoom transition to allow the fade-in transition of\n  // to fully end. This is solution is not ideal but chaining transitions like\n  // described at http://stackoverflow.com/a/17101823/981933 is infeasable\n  // since an unknown number of multiple selections has to be transitioned first\n  var transition = this.treeMap.element.transition().duration(750);\n\n  // Update the domain only after entering new elements.\n  this.treeMap.x.domain([0, data.dx]);\n  this.treeMap.y.domain([0, data.dy]);\n\n  var scaleX = this.treeMap.width / data.dx,\n      scaleY = this.treeMap.height / data.dy,\n      originX = absX + (data.dx / 2),\n      originY = absY + (data.dy / 2),\n      centerAdjustmentX = (this.treeMap.width / 2) - originX,\n      centerAdjustmentY = (this.treeMap.height / 2) - originY;\n\n  console.log(\n    'transform-origin: ' + (absX + (data.dx / 2)) + 'px ' + (absY + (data.dy / 2)) + 'px', 'scaleX(' + scaleX +') scaleY(' + scaleY +')',\n    centerAdjustmentX,\n    centerAdjustmentY,\n    'translate3d(-' + absX + 'px, -' + absY + 'px)'\n  );\n\n  this.treeMap.$element\n    .css('transform', 'translate3d(-' + (absX * scaleX) + 'px, -' + (absY * scaleY) + 'px, 0)');\n\n  // this.treeMap.$element\n  //   .css({\n  //     'transformOrigin': originX + 'px ' + originY + 'px',\n  //     'transform': 'translate(' + centerAdjustmentX + 'px, ' + centerAdjustmentY + 'px) scaleX(' + scaleX +') scaleY(' + scaleY +')'\n  //   });\n\n  this.treeMap.element.selectAll('.node')\n    .style('transition-delay', null)\n    .style('transition-duration', null)\n    .style('transform', 'rotate(0.1deg)')\n    .call(this.coordinates.bind(this));\n};\n\n\n/*\n * -----------------------------------------------------------------------------\n * Properties\n * -----------------------------------------------------------------------------\n */\n\nObject.defineProperty(\n  TreeMapDivCtrl.prototype,\n  'nodesAtLevel',\n  {\n    configurable: false,\n    enumerable: true,\n    value: [],\n    writable: true\n  }\n);\n\nObject.defineProperty(\n  TreeMapDivCtrl.prototype,\n  'data',\n  {\n    configurable: false,\n    enumerable: true,\n    value: null,\n    writable: true\n});\n\nObject.defineProperty(\n  TreeMapDivCtrl.prototype,\n  'mode',\n  {\n    configurable: false,\n    enumerable: true,\n    value: 'branch',\n    writable: true\n});\n\nObject.defineProperty(\n  TreeMapDivCtrl.prototype,\n  'visibleDepth',\n  {\n    configurable: false,\n    enumerable: true,\n    get: function () {\n      return this._visibleDepth;\n    },\n    set: function (visibleDepth) {\n      var oldLevel = this._visibleDepth;\n      this._visibleDepth = Math.max(1, visibleDepth);\n      this.adjustLevelDepth(oldLevel, this.visibleDepth);\n    }\n});\n\nObject.defineProperty(\n  TreeMapDivCtrl.prototype,\n  'treeMap',\n  {\n    configurable: false,\n    enumerable: true,\n    value: {},\n    writable: true\n});\n\nangular\n  .module('treeMapDiv')\n  .controller('TreeMapDivCtrl', [\n    '$window',\n    '$element',\n    '$',\n    'd3',\n    'neo4jD3',\n    'D3Colors',\n    TreeMapDivCtrl\n  ]);\n","function treeMapDivDirective () {\n  'use strict';\n\n  return {\n    controller: 'TreeMapDivCtrl',\n    controllerAs: 'treeMap',\n    restrict: 'E',\n    replace: true,\n    templateUrl: 'treeMapDiv/template.html'\n  };\n}\n\nangular\n  .module('treeMapDiv')\n  .directive('treeMapDiv', [\n    treeMapDivDirective\n  ]);\n","function Neo4J ($resource, $window) {\n  return function (url, user, password) {\n    return $resource(\n      url + '/db/data/transaction/commit/',\n      {},\n      {\n        query: {\n          method: 'POST',\n          headers: {\n            'Accept': 'application/json; charset=UTF-8',\n            'Content-type': 'application/json',\n            // Base64 encoding using `window.btoa`\n            'Authorization': 'Basic: ' + $window.btoa(user + ':' + password)\n          },\n          isArray: false,\n        }\n      }\n    );\n  };\n}\n\nangular\n  .module('neo4jD3')\n  .factory('Neo4J', [\n    '$resource',\n    '$window',\n    Neo4J\n  ]);\n","function buildTree (results) {\n  var child,\n      // Stores the children of each node..\n      // The only difference to `nodes` is that the `children` is an object\n      // holding the name of the child node.\n      childIndex = {\n        'owl:Thing': {}\n      },\n      currentChild,\n      currentDataSet,\n      currentParent,\n      data = results.data,\n      dataSet,\n      i,\n      lastNode,\n      len,\n      nodes = {\n        'owl:Thing': {\n          // Fortunately `owl:Thing` the mandatory root for any ontology.\n          name: 'owl:Thing',\n          children: []\n        }\n      },\n      parent;\n\n  // Determine which column corresponce to which node\n  len = results.columns.length;\n  for (i = 0; i < len; i++) {\n    switch (results.columns[i]) {\n      case 'child':\n        child = i;\n        break;\n      case 'dataSet':\n        dataSet = i;\n        break;\n      case 'parent':\n        parent = i;\n        break;\n    }\n  }\n\n  // Loop over all rows and build the tree\n  len = data.length;\n  for (i = 0; i < len; i++) {\n    // Cache for speed:\n    // Extensive object nesting is expensive;\n    currentChild = data[i].row[child];\n    currentDataSet = data[i].row[dataSet];\n    currentParent = data[i].row[parent];\n\n    if (!(currentParent.name in nodes)) {\n      nodes[currentParent.name] = {\n        children: [],\n        dataSets: [],\n        name: currentParent.name,\n        numDataSets: 0,\n        ontID: currentParent.name\n      };\n    }\n\n    if (!(currentChild.name in nodes)) {\n      nodes[currentChild.name] = {\n        children: [],\n        dataSets: [],\n        name: currentChild.name,\n        numDataSets: 0,\n        ontID: currentChild.name\n      };\n    }\n\n    if ('rdfs:label' in currentChild) {\n      nodes[currentChild.name].name = currentChild['rdfs:label'];\n    }\n\n    if ('uri' in currentChild) {\n      nodes[currentChild.name].uri = currentChild.uri;\n    }\n\n    if (currentDataSet !== null) {\n      nodes[currentChild.name].numDataSets++;\n      nodes[currentChild.name].dataSets.push(currentDataSet.uuid);\n    }\n\n    if (!(currentParent.name in childIndex)) {\n      childIndex[currentParent.name] = {};\n    }\n\n    if (!(currentChild.name in childIndex[currentParent.name])) {\n      nodes[currentParent.name].children.push(nodes[currentChild.name]);\n      childIndex[currentParent.name][currentChild.name] = true;\n    }\n  }\n\n  // Deep clone object to be usable by D3\n  return JSON.parse(JSON.stringify(nodes['owl:Thing']));\n}\n\nfunction Neo4jD3 ($q, Neo4J, settings) {\n  this.$q = $q;\n  this.Neo4J = new Neo4J(\n    settings.neo4jUrl,\n    settings.neo4jUser,\n    settings.neo4jPassword\n  );\n}\n\nNeo4jD3.prototype.get = function () {\n  if (this.d3 && typeof this.d3.value === 'function') {\n    return this.d3;\n  }\n\n  // Private\n  var d3Deferred = this.$q.defer();\n\n  this.Neo4J.query({\n      statements: [{\n        statement: \"MATCH (parent:cl:Class)<-[:`rdfs:subClassOf`]-(child) \" +\n          \"OPTIONAL MATCH (dataSet:DataSet)-[:`annotated_with`]->(child) \" +\n          \"RETURN parent, child, dataSet\"\n      }]\n    })\n    .$promise\n    .then(function (response) {\n      if (response.errors.length === 0) {\n        try {\n          var start = new Date().getTime();\n          var d3Data = buildTree(response.results[0]);\n          d3Deferred.resolve(d3Data);\n          var end = new Date().getTime();\n          var time = end - start;\n          console.log('Neo4J to D3 converter execution time: ' + time);\n        } catch (error) {\n          d3Deferred.reject(error);\n          console.error(error);\n        }\n      }\n      this.neo4jResponse = response;\n    }.bind(this))\n    .catch(function (error) {\n      d3Deferred.reject(error);\n      console.error(error);\n    });\n\n  this.d3 = d3Deferred.promise;\n};\n\nObject.defineProperty(\n  Neo4jD3.prototype,\n  'neo4jResponse', {\n    configurable: false,\n    enumerable: true,\n    writable: true\n});\n\nObject.defineProperty(\n  Neo4jD3.prototype,\n  'd3', {\n    configurable: false,\n    enumerable: true,\n    writable: true\n});\n\nangular\n  .module('neo4jD3')\n  .service('neo4jD3', [\n    '$q',\n    'Neo4J',\n    'settings',\n    Neo4jD3\n  ]);\n","angular\n  .module('treeMapApp', [\n    'templates',\n    'treeMap',\n    'treeMapDiv',\n    'globalEvents'\n  ]);\n","angular\n  .module('treeMap', [\n    'neo4jD3',\n    'd3Colors'\n  ]);\n","angular\n  .module('treeMapDiv', [\n    'neo4jD3',\n    'd3Colors'\n  ]);\n","angular\n  .module('color', []);\n","angular\n  .module('globalEvents', []);\n","angular\n  .module('neo4jD3', [\n    'ngResource'\n  ]);\n","angular\n  .module('treeMapApp')\n  .config([function () {}]);\n","angular\n  .module('treeMapApp')\n  .constant('$', jQuery)\n  .constant('_', _.noConflict())\n  .constant('d3', d3);\n","angular\n  .module('treeMapApp')\n  .constant('settings', {\n    'neo4jUrl': 'http://localhost:7474',\n    'neo4jUser': 'neo4j',\n    'neo4jPassword': '123',\n    'treeMapFadeInDuration': 333,\n    'treeMapZoomDuration': 666\n  });\n","angular\n  .module('color')\n  .factory('HEX', ['$injector', function ($injector) {\n    /**\n     * HEX constructor object\n     *\n     * @param   String  hex    The hex color string.\n     */\n    function HEX (hex) {\n      this.hex = hex;\n    }\n\n    /**\n     * Assign constructor to itself\n     *\n     * @type {Function}\n     */\n    HEX.prototype.constructor = HEX;\n\n    /**\n     * Convert HEX to RGB and then to HSL.\n     *\n     * @return  {Object}  HSL object.\n     */\n    HEX.prototype.toHsl = function () {\n      return this.toRgb().toHsl();\n    };\n\n    /**\n     * Convert HEX to RGB.\n     *\n     * @return  {Object}  RGB object.\n     */\n    HEX.prototype.toRgb = function () {\n      var RGB = $injector.get('RGB'),\n          result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(this.hex);\n\n      return new RGB(\n        parseInt(result[1], 16),\n        parseInt(result[2], 16),\n        parseInt(result[3], 16)\n      );\n    };\n\n    /**\n     * Convert HEX to String with a prepended hash\n     *\n     * @return  {String}  String represenation of HEX.\n     */\n    HEX.prototype.toString = function () {\n      return '#' + this.hex;\n    };\n\n    Object.defineProperty(HEX.prototype, 'hex', {\n      get: function() {\n        return this._hex;\n      },\n      set: function(hex) {\n        if (typeof hex === 'string') {\n          var match = hex.match(/^#?((?:[0-9a-fA-F]{3}){1,2})$/i);\n          if (!match) {\n            throw new Error('String \"' + hex + '\" is not a valid HEX color.');\n          }\n          hex = match[1];\n        } else {\n          throw new Error('HEX must be a string. ' + typeof hex);\n        }\n        this._hex = hex;\n      }\n    });\n\n    return HEX;\n  }]);\n","angular\n  .module('color')\n  .factory('HSL', ['$injector', function ($injector) {\n    /**\n     * HSL constructor object\n     *\n     * @param   String  HSL    The HSL color string.\n     */\n    function HSL (hue, saturation, lightness) {\n      if (typeof hue === 'object') {\n        this.lightness = hue.lightness;\n        this.saturation = hue.saturation;\n        this.hue = hue.hue;\n      } else {\n        this.hue = hue;\n        this.lightness = lightness;\n        this.saturation = saturation;\n      }\n    }\n\n    /**\n     * Assign constructor to itself\n     *\n     * @type {Function}\n     */\n    HSL.prototype.constructor = HSL;\n\n    /**\n     * Brighten the color by step-wise increase of lightness. If `noLast` is `true`\n     * the number of steps doesn't include the final white.\n     *\n     * @param   {Number}   steps   Number of steps.\n     * @param   {Boolean}  noLast  Skip last step, i.e. white.\n     * @return  {Array}            Array of adjusted HSL colors.\n     */\n    HSL.prototype.brighten = function (steps, noLast) {\n      var colors = [],\n          i = 0,\n          lStep = (1 - this.lightness) / (steps + (noLast ? 1 : 0));\n\n      while (i++ < steps) {\n        colors.push(new HSL(\n          this.hue,\n          this.saturation,\n          this.lightness + (i * lStep)\n        ));\n      }\n\n      return colors;\n    };\n\n    /**\n     * Convert HEX to RGB and then to HSL.\n     *\n     * @return  {Object}  HSL object.\n     */\n    HSL.prototype.toHex = function () {\n      return this.toRgb().toHex();\n    };\n\n    /**\n     * Converts an HSL color value to RGB. Conversion formula\n     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n     * Assumes h, s, and l are contained in the set [0, 1] and\n     * returns r, g, and b in the set [0, 255].\n     *\n     * @return  {Array}  The RGB representation\n     */\n    HSL.prototype.toRgb = function () {\n      var RGB = $injector.get('RGB'),\n          r, g, b;\n\n      function hueToRgb (p, q, t) {\n        if (t < 0) {\n          t++;\n        }\n        if (t > 1) {\n          t--;\n        }\n        if (t < 1/6) {\n          return p + (q - p) * 6 * t;\n        }\n        if (t < 1/2) {\n          return q;\n        }\n        if (t < 2/3) {\n          return p + (q - p) * (2/3 - t) * 6;\n        }\n        return p;\n      }\n\n      if (this.saturation === 0) {\n        r = g = b = this.lightness; // achromatic\n      } else {\n        var q = this.lightness < 0.5 ? this.lightness * (1 + this.saturation) : this.lightness + this.saturation - this.lightness * this.saturation;\n        var p = 2 * this.lightness - q;\n\n        r = hueToRgb(p, q, this.hue + 1/3);\n        g = hueToRgb(p, q, this.hue);\n        b = hueToRgb(p, q, this.hue - 1/3);\n      }\n\n      return new RGB(\n        Math.round(r * 255),\n        Math.round(g * 255),\n        Math.round(b * 255)\n      );\n    };\n\n    Object.defineProperty(HSL.prototype, 'hue', {\n      get: function() {\n        return this._hue;\n      },\n      set: function(hue) {\n        if (!(typeof hue === 'number' && hue >= 0 && hue <= 1)) {\n          throw new Error('Hue must be a float between 0 and 1.');\n        }\n        this._hue = hue;\n      }\n    });\n\n    Object.defineProperty(HSL.prototype, 'lightness', {\n      get: function() {\n        return this._lightness;\n      },\n      set: function(lightness) {\n        if (!(typeof lightness === 'number' && lightness >= 0 && lightness <= 1)) {\n          throw new Error('Lightness must be a float between 0 and 1.');\n        }\n        this._lightness = lightness;\n      }\n    });\n\n    Object.defineProperty(HSL.prototype, 'saturation', {\n      get: function() {\n        return this._saturation;\n      },\n      set: function(saturation) {\n        if (!(typeof saturation === 'number' && saturation >= 0 && saturation <= 1)) {\n          throw new Error('Saturation must be a float between 0 and 1.');\n        }\n        this._saturation = saturation;\n      }\n    });\n\n    return HSL;\n  }]);\n","angular\n  .module('color')\n  .service('RGB', ['$injector', function ($injector) {\n    /**\n     * RGB constructor object\n     *\n     * @param   Number  red    The red color value.\n     * @param   Number  green  The green color value.\n     * @param   Number  blue   The blue color value.\n     */\n    function RGB (red, green, blue) {\n      if (typeof red === 'object') {\n        this.blue = red.blue;\n        this.green = red.green;\n        this.red = red.red;\n      } else {\n        this.blue = blue;\n        this.green = green;\n        this.red = red;\n      }\n    }\n\n    /**\n     * Assign constructor to itself\n     *\n     * @type {Function}\n     */\n    RGB.prototype.constructor = RGB;\n\n    /**\n     * Converts the RGB color value to HSL. Conversion formula\n     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n     * Assumes r, g, and b are contained in the set [0, 255] and\n     * returns h, s, and l in the set [0, 1].\n     *\n     * @param   Number  r  The red color value.\n     * @param   Number  g  The green color value.\n     * @param   Number  b  The blue color value.\n     * @return  Array      The HSL representation.\n     */\n    RGB.prototype.toHsl = function () {\n      var r = this.red / 255,\n          g = this.green / 255,\n          b = this.blue / 255,\n          max = Math.max(r, g, b),\n          min = Math.min(r, g, b),\n          h,\n          s,\n          l = (max + min) / 2,\n          HSL = $injector.get('HSL');\n\n      if (max === min) {\n        h = s = 0; // achromatic\n      } else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch (max) {\n          case r:\n            h = (g - b) / d + (g < b ? 6 : 0);\n            break;\n          case g:\n            h = (b - r) / d + 2;\n            break;\n          case b:\n            h = (r - g) / d + 4;\n            break;\n        }\n        h /= 6;\n      }\n\n      return new HSL(\n        h,\n        s,\n        l\n      );\n    };\n\n    /**\n     * Converts the RGB color value to HEX.\n     *\n     * @param   Number  r  The red color value.\n     * @param   Number  g  The green color value.\n     * @param   Number  b  The blue color value.\n     * @return  String     The HEX representation.\n     */\n    RGB.prototype.toHex = function () {\n      var HEX = $injector.get('HEX');\n\n      return new HEX(\n        '#' + ((1 << 24) + (this.red << 16) + (this.green << 8) + this.blue).toString(16).slice(1)\n      );\n    };\n\n    RGB.prototype.luminosity = function (red, green, blue) {\n      // http://www.w3.org/TR/WCAG20/#relativeluminancedef\n      if (typeof red === 'undefined') {\n        red = this.red;\n        green = this.green;\n        blue = this.blue;\n      }\n\n      function lum (absValue) {\n        var relValue = absValue / 255;\n        return relValue <= 0.03928 ?\n          relValue / 12.92 : Math.pow(((relValue + 0.055) / 1.055), 2.4);\n      }\n\n      return 0.2126 * lum(red) + 0.7152 * lum(green) + 0.0722 * lum(blue);\n    };\n\n    RGB.prototype.contrast = function (color) {\n      // http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n      var lum1 = this.luminosity(this.red, this.green, this.blue);\n      var lum2 = this.luminosity(color.red, color.green, color.blue);\n      if (lum1 > lum2) {\n         return (lum1 + 0.05) / (lum2 + 0.05)\n      };\n      return (lum2 + 0.05) / (lum1 + 0.05);\n    };\n\n    Object.defineProperty(RGB.prototype, 'blue', {\n      get: function() {\n        return this._blue;\n      },\n      set: function(blue) {\n        if (!(Number(blue) === blue && blue % 1 === 0 && blue >= 0 && blue <= 255)) {\n          throw new Error('Blue must be an integer between 0 and 255.');\n        }\n        this._blue = blue;\n      }\n    });\n\n    Object.defineProperty(RGB.prototype, 'green', {\n      get: function() {\n        return this._green;\n      },\n      set: function(green) {\n        if (!(Number(green) === green && green % 1 === 0 && green >= 0 && green <= 255)) {\n          throw new Error('Green must be an integer between 0 and 255.');\n        }\n        this._green = green;\n      }\n    });\n\n    Object.defineProperty(RGB.prototype, 'red', {\n      get: function() {\n        return this._red;\n      },\n      set: function(red) {\n        if (!(Number(red) === red && red % 1 === 0 && red >= 0 && red <= 255)) {\n          throw new Error('Red must be an integer between 0 and 255.');\n        }\n        this._red = red;\n      }\n    });\n\n    return RGB;\n  }]);\n","angular\n  .module('d3Colors', ['color'])\n  .factory('D3Colors', [\n    'd3',\n    'HEX',\n    'HSL',\n    'RGB',\n    function (d3, HEX, HSL, RGB) {\n      /**\n       * D3Colors constructor object\n       */\n      function D3Colors (colors) {\n        this._colors = [];\n        this.colors = colors;\n      }\n\n      /**\n       * Assign constructor to itself\n       *\n       * @type {Function}\n       */\n      D3Colors.prototype.constructor = D3Colors;\n\n      D3Colors.prototype.getScaledFadedColors = function (steps) {\n        var fadedColors = [];\n        for (var i = 0, len = this.colors.length; i < len; i++) {\n          var hsl = this.colors[i].toHsl(),\n              colors = hsl.brighten(steps - 1, true);\n\n          // Prepend original color\n          colors.unshift(hsl);\n\n          // Convert HSL back to RGB\n          for (var j = 0; j < steps; j++) {\n            colors[j] = colors[j].toHex().toString();\n          }\n\n          // Merge set of fading colors\n          fadedColors = fadedColors.concat(colors);\n        }\n        return d3.scale.ordinal()\n          .domain(d3.range(this.colors.length * (steps + 1)))\n          .range(fadedColors);\n      };\n\n      Object.defineProperty(D3Colors.prototype, 'colors', {\n        get: function() {\n          return this._colors;\n        },\n        set: function(colors) {\n          if (!(colors && colors.length)) {\n            throw new Error('Colors needs to be an array.');\n          }\n          try {\n            for (var i = 0, len = colors.length; i < len; i++) {\n              this._colors.push(new HEX(colors[i]));\n            }\n          } catch (e) {\n            throw new Error('Colors needs to be an array.');\n          }\n        }\n      });\n\n      return D3Colors;\n    }\n  ]);\n","var GlobalEvents = (function () {\n  var private = {};\n\n  function GlobalEvents ($window, $, _) {\n    private.eventStack = {};\n\n    // Public\n    this._ = _;\n  }\n\n  GlobalEvents.prototype.off = function (event, index) {\n    if (event in private.eventStack && index in private.eventStack[event]) {\n      private.eventStack[event].splice(index, 1);\n      return true;\n    }\n\n    return false;\n  };\n\n  GlobalEvents.prototype.on = function (event, callback) {\n    if (event in private.eventStack) {\n      private.eventStack[event].push(callback);\n    } else {\n      private.eventStack[event] = [callback];\n    }\n\n    return private.eventStack[event].length - 1;\n  };\n\n  GlobalEvents.prototype.trigger = function (event) {\n    if (event in private.eventStack) {\n      var stack = private.eventStack[event];\n      for (var i = 0, len = stack.length; i < len; i++) {\n        if (this._.isFunction(stack[i])) {\n          stack[i]();\n        }\n      }\n    }\n  };\n\n  return GlobalEvents;\n}());\n\nangular\n  .module('globalEvents')\n  .service('globalEvents', [\n    '$window',\n    '$',\n    '_',\n    GlobalEvents\n  ]);\n"],"sourceRoot":"/source/"}